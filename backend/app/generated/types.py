# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _UserStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.UserStatus']]


class _UserStatusListFilterHasInput(TypedDict):
    has: 'enums.UserStatus'


class _UserStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.UserStatus']


class _UserStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.UserStatus']


class _UserStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


UserStatusListFilter = Union[
    _UserStatusListFilterHasInput,
    _UserStatusListFilterEqualsInput,
    _UserStatusListFilterHasSomeInput,
    _UserStatusListFilterIsEmptyInput,
    _UserStatusListFilterHasEveryInput,
]


class _UserStatusListUpdateSet(TypedDict):
    set: List['enums.UserStatus']


class _UserStatusListUpdatePush(TypedDict):
    push: List['enums.UserStatus']


UserStatusListUpdate = Union[
    List['enums.UserStatus'],
    _UserStatusListUpdateSet,
    _UserStatusListUpdatePush,
]

class _RoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.Role']]


class _RoleListFilterHasInput(TypedDict):
    has: 'enums.Role'


class _RoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.Role']


class _RoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.Role']


class _RoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


RoleListFilter = Union[
    _RoleListFilterHasInput,
    _RoleListFilterEqualsInput,
    _RoleListFilterHasSomeInput,
    _RoleListFilterIsEmptyInput,
    _RoleListFilterHasEveryInput,
]


class _RoleListUpdateSet(TypedDict):
    set: List['enums.Role']


class _RoleListUpdatePush(TypedDict):
    push: List['enums.Role']


RoleListUpdate = Union[
    List['enums.Role'],
    _RoleListUpdateSet,
    _RoleListUpdatePush,
]

class _AdminActionTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.AdminActionType']]


class _AdminActionTypeListFilterHasInput(TypedDict):
    has: 'enums.AdminActionType'


class _AdminActionTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.AdminActionType']


class _AdminActionTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.AdminActionType']


class _AdminActionTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


AdminActionTypeListFilter = Union[
    _AdminActionTypeListFilterHasInput,
    _AdminActionTypeListFilterEqualsInput,
    _AdminActionTypeListFilterHasSomeInput,
    _AdminActionTypeListFilterIsEmptyInput,
    _AdminActionTypeListFilterHasEveryInput,
]


class _AdminActionTypeListUpdateSet(TypedDict):
    set: List['enums.AdminActionType']


class _AdminActionTypeListUpdatePush(TypedDict):
    push: List['enums.AdminActionType']


AdminActionTypeListUpdate = Union[
    List['enums.AdminActionType'],
    _AdminActionTypeListUpdateSet,
    _AdminActionTypeListUpdatePush,
]

class _AdminTargetTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.AdminTargetType']]


class _AdminTargetTypeListFilterHasInput(TypedDict):
    has: 'enums.AdminTargetType'


class _AdminTargetTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.AdminTargetType']


class _AdminTargetTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.AdminTargetType']


class _AdminTargetTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


AdminTargetTypeListFilter = Union[
    _AdminTargetTypeListFilterHasInput,
    _AdminTargetTypeListFilterEqualsInput,
    _AdminTargetTypeListFilterHasSomeInput,
    _AdminTargetTypeListFilterIsEmptyInput,
    _AdminTargetTypeListFilterHasEveryInput,
]


class _AdminTargetTypeListUpdateSet(TypedDict):
    set: List['enums.AdminTargetType']


class _AdminTargetTypeListUpdatePush(TypedDict):
    push: List['enums.AdminTargetType']


AdminTargetTypeListUpdate = Union[
    List['enums.AdminTargetType'],
    _AdminTargetTypeListUpdateSet,
    _AdminTargetTypeListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    avatar: Optional[_str]
    status: 'enums.UserStatus'
    bannedUntil: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    messages: 'MessageCreateManyNestedWithoutRelationsInput'
    channelMembers: 'ChannelMemberCreateManyNestedWithoutRelationsInput'
    mentions: 'MentionCreateManyNestedWithoutRelationsInput'
    reactions: 'MessageReactionCreateManyNestedWithoutRelationsInput'
    roles: 'UserRoleCreateManyNestedWithoutRelationsInput'
    adminActions: 'AdminActionCreateManyNestedWithoutRelationsInput'
    assignedRoles: 'UserRoleCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    username: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    avatar: Optional[_str]
    status: 'enums.UserStatus'
    bannedUntil: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    username: _str
    password: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

_UserWhereUnique_username_Input = TypedDict(
    '_UserWhereUnique_username_Input',
    {
        'username': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
    '_UserWhereUnique_username_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    email: _str
    username: _str
    password: _str
    avatar: Optional[_str]
    status: 'enums.UserStatus'
    bannedUntil: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    messages: 'MessageUpdateManyWithoutRelationsInput'
    channelMembers: 'ChannelMemberUpdateManyWithoutRelationsInput'
    mentions: 'MentionUpdateManyWithoutRelationsInput'
    reactions: 'MessageReactionUpdateManyWithoutRelationsInput'
    roles: 'UserRoleUpdateManyWithoutRelationsInput'
    adminActions: 'AdminActionUpdateManyWithoutRelationsInput'
    assignedRoles: 'UserRoleUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    email: _str
    username: _str
    password: _str
    avatar: Optional[_str]
    status: 'enums.UserStatus'
    bannedUntil: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_username_OrderByInput = TypedDict(
    '_User_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_avatar_OrderByInput = TypedDict(
    '_User_avatar_OrderByInput',
    {
        'avatar': 'SortOrder',
    },
    total=True
)

_User_status_OrderByInput = TypedDict(
    '_User_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_User_bannedUntil_OrderByInput = TypedDict(
    '_User_bannedUntil_OrderByInput',
    {
        'bannedUntil': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_username_OrderByInput',
    '_User_password_OrderByInput',
    '_User_avatar_OrderByInput',
    '_User_status_OrderByInput',
    '_User_bannedUntil_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    messages: Union[bool, 'FindManyMessageArgsFromUser']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromUser']
    mentions: Union[bool, 'FindManyMentionArgsFromUser']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUser']
    roles: Union[bool, 'FindManyUserRoleArgsFromUser']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromUser']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRecursive1']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromUserRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRecursive1']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromUserRecursive1']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRecursive2']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromUserRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRecursive2']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromUserRecursive2']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRecursive3']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromUserRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRecursive3']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromUserRecursive3']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRecursive4']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromUserRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRecursive4']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromUserRecursive4']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserRoleIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    channel: Union[bool, 'ChannelArgsFromUserRecursive1']
    assigner: Union[bool, 'UserArgsFromUserRecursive1']


class UserRoleIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    channel: Union[bool, 'ChannelArgsFromUserRecursive2']
    assigner: Union[bool, 'UserArgsFromUserRecursive2']


class UserRoleIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    channel: Union[bool, 'ChannelArgsFromUserRecursive3']
    assigner: Union[bool, 'UserArgsFromUserRecursive3']


class UserRoleIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    channel: Union[bool, 'ChannelArgsFromUserRecursive4']
    assigner: Union[bool, 'UserArgsFromUserRecursive4']


class UserRoleIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserRoleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class UserRoleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class UserRoleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class UserRoleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class UserRoleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserRoleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class FindManyUserRoleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class FindManyUserRoleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class FindManyUserRoleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class FindManyUserRoleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    
    

class AdminActionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    admin: Union[bool, 'UserArgsFromUserRecursive1']


class AdminActionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    admin: Union[bool, 'UserArgsFromUserRecursive2']


class AdminActionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    admin: Union[bool, 'UserArgsFromUserRecursive3']


class AdminActionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    admin: Union[bool, 'UserArgsFromUserRecursive4']


class AdminActionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AdminActionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class AdminActionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class AdminActionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class AdminActionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class AdminActionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAdminActionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class FindManyAdminActionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class FindManyAdminActionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class FindManyAdminActionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class FindManyAdminActionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    
    

class ChannelIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRecursive1']
    members: Union[bool, 'FindManyChannelMemberArgsFromUserRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRecursive1']


class ChannelIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRecursive2']
    members: Union[bool, 'FindManyChannelMemberArgsFromUserRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRecursive2']


class ChannelIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRecursive3']
    members: Union[bool, 'FindManyChannelMemberArgsFromUserRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRecursive3']


class ChannelIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRecursive4']
    members: Union[bool, 'FindManyChannelMemberArgsFromUserRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRecursive4']


class ChannelIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ChannelArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChannelIncludeFromChannelRecursive1'


class ChannelArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChannelIncludeFromChannelRecursive2'


class ChannelArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChannelIncludeFromChannelRecursive3'


class ChannelArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChannelIncludeFromChannelRecursive4'


class ChannelArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyChannelArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive1'


class FindManyChannelArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive2'


class FindManyChannelArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive3'


class FindManyChannelArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive4'


class FindManyChannelArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    
    

class MessageIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    channel: Union[bool, 'ChannelArgsFromUserRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRecursive1']


class MessageIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    channel: Union[bool, 'ChannelArgsFromUserRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRecursive2']


class MessageIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    channel: Union[bool, 'ChannelArgsFromUserRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRecursive3']


class MessageIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    channel: Union[bool, 'ChannelArgsFromUserRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRecursive4']


class MessageIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class MessageArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMessageArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class ChannelMemberIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    channel: Union[bool, 'ChannelArgsFromUserRecursive1']


class ChannelMemberIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    channel: Union[bool, 'ChannelArgsFromUserRecursive2']


class ChannelMemberIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    channel: Union[bool, 'ChannelArgsFromUserRecursive3']


class ChannelMemberIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    channel: Union[bool, 'ChannelArgsFromUserRecursive4']


class ChannelMemberIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ChannelMemberArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class ChannelMemberArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class ChannelMemberArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class ChannelMemberArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class ChannelMemberArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyChannelMemberArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class FindManyChannelMemberArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class FindManyChannelMemberArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class FindManyChannelMemberArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class FindManyChannelMemberArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    
    

class MentionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    message: Union[bool, 'MessageArgsFromUserRecursive1']


class MentionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    message: Union[bool, 'MessageArgsFromUserRecursive2']


class MentionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    message: Union[bool, 'MessageArgsFromUserRecursive3']


class MentionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    message: Union[bool, 'MessageArgsFromUserRecursive4']


class MentionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class MentionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MentionIncludeFromMentionRecursive1'


class MentionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MentionIncludeFromMentionRecursive2'


class MentionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'MentionIncludeFromMentionRecursive3'


class MentionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'MentionIncludeFromMentionRecursive4'


class MentionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMentionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive1'


class FindManyMentionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive2'


class FindManyMentionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive3'


class FindManyMentionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive4'


class FindManyMentionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    
    

class MessageReactionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    message: Union[bool, 'MessageArgsFromUserRecursive1']


class MessageReactionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    message: Union[bool, 'MessageArgsFromUserRecursive2']


class MessageReactionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    message: Union[bool, 'MessageArgsFromUserRecursive3']


class MessageReactionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    message: Union[bool, 'MessageArgsFromUserRecursive4']


class MessageReactionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class MessageReactionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class MessageReactionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class MessageReactionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class MessageReactionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class MessageReactionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMessageReactionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class FindManyMessageReactionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class FindManyMessageReactionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class FindManyMessageReactionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class FindManyMessageReactionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    status: 'enums.UserStatus'
    bannedUntil: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'MessageListRelationFilter'
    channelMembers: 'ChannelMemberListRelationFilter'
    mentions: 'MentionListRelationFilter'
    reactions: 'MessageReactionListRelationFilter'
    roles: 'UserRoleListRelationFilter'
    adminActions: 'AdminActionListRelationFilter'
    assignedRoles: 'UserRoleListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    status: 'enums.UserStatus'
    bannedUntil: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'MessageListRelationFilter'
    channelMembers: 'ChannelMemberListRelationFilter'
    mentions: 'MentionListRelationFilter'
    reactions: 'MessageReactionListRelationFilter'
    roles: 'UserRoleListRelationFilter'
    adminActions: 'AdminActionListRelationFilter'
    assignedRoles: 'UserRoleListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    status: 'enums.UserStatus'
    bannedUntil: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'MessageListRelationFilter'
    channelMembers: 'ChannelMemberListRelationFilter'
    mentions: 'MentionListRelationFilter'
    reactions: 'MessageReactionListRelationFilter'
    roles: 'UserRoleListRelationFilter'
    adminActions: 'AdminActionListRelationFilter'
    assignedRoles: 'UserRoleListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    status: 'enums.UserStatus'
    bannedUntil: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'MessageListRelationFilter'
    channelMembers: 'ChannelMemberListRelationFilter'
    mentions: 'MentionListRelationFilter'
    reactions: 'MessageReactionListRelationFilter'
    roles: 'UserRoleListRelationFilter'
    adminActions: 'AdminActionListRelationFilter'
    assignedRoles: 'UserRoleListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    avatar: Union[None, _str, 'types.StringFilter']
    status: 'enums.UserStatus'
    bannedUntil: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'MessageListRelationFilter'
    channelMembers: 'ChannelMemberListRelationFilter'
    mentions: 'MentionListRelationFilter'
    reactions: 'MessageReactionListRelationFilter'
    roles: 'UserRoleListRelationFilter'
    adminActions: 'AdminActionListRelationFilter'
    assignedRoles: 'UserRoleListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.UserStatus'
    bannedUntil: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.UserStatus'
    bannedUntil: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.UserStatus'
    bannedUntil: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.UserStatus'
    bannedUntil: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    avatar: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.UserStatus'
    bannedUntil: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    email: _str
    username: _str
    password: _str
    avatar: _str
    status: 'enums.UserStatus'
    bannedUntil: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    email: _str
    username: _str
    password: _str
    avatar: _str
    status: 'enums.UserStatus'
    bannedUntil: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    username: bool
    password: bool
    avatar: bool
    status: bool
    bannedUntil: bool
    createdAt: bool
    updatedAt: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    username: bool
    password: bool
    avatar: bool
    status: bool
    bannedUntil: bool
    createdAt: bool
    updatedAt: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'username': bool,
        'password': bool,
        'avatar': bool,
        'status': bool,
        'bannedUntil': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'username': int,
        'password': int,
        'avatar': int,
        'status': int,
        'bannedUntil': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'username',
    'password',
    'avatar',
    'status',
    'bannedUntil',
    'createdAt',
    'updatedAt',
    'messages',
    'channelMembers',
    'mentions',
    'reactions',
    'roles',
    'adminActions',
    'assignedRoles',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'username',
    'password',
    'avatar',
    'status',
    'bannedUntil',
    'createdAt',
    'updatedAt',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'messages',
        'channelMembers',
        'mentions',
        'reactions',
        'roles',
        'adminActions',
        'assignedRoles',
    ]

# UserRole types

class UserRoleOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserRole create method"""
    id: _str
    channelId: Optional[_str]
    assignedAt: datetime.datetime
    assignedBy: _str
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    channel: 'ChannelCreateNestedWithoutRelationsInput'
    assigner: 'UserCreateNestedWithoutRelationsInput'


class UserRoleCreateInput(UserRoleOptionalCreateInput):
    """Required arguments to the UserRole create method"""
    role: 'enums.Role'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserRoleOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserRole create method, without relations"""
    id: _str
    channelId: Optional[_str]
    assignedAt: datetime.datetime
    assignedBy: _str
    userId: _str


class UserRoleCreateWithoutRelationsInput(UserRoleOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserRole create method, without relations"""
    role: 'enums.Role'

class UserRoleConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserRoleCreateWithoutRelationsInput'
    where: 'UserRoleWhereUniqueInput'

class UserRoleCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserRoleCreateWithoutRelationsInput'
    connect: 'UserRoleWhereUniqueInput'
    connect_or_create: 'UserRoleConnectOrCreateWithoutRelationsInput'


class UserRoleCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserRoleCreateWithoutRelationsInput', List['UserRoleCreateWithoutRelationsInput']]
    connect: Union['UserRoleWhereUniqueInput', List['UserRoleWhereUniqueInput']]
    connect_or_create: Union['UserRoleConnectOrCreateWithoutRelationsInput', List['UserRoleConnectOrCreateWithoutRelationsInput']]

_UserRoleWhereUnique_id_Input = TypedDict(
    '_UserRoleWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserRoleCompounduserId_role_channelIdKeyInner = TypedDict(
    '_UserRoleCompounduserId_role_channelIdKeyInner',
    {
        'userId': '_str',
        'role': 'enums.Role',
        'channelId': '_str',
    },
    total=True
)

_UserRoleCompounduserId_role_channelIdKey = TypedDict(
    '_UserRoleCompounduserId_role_channelIdKey',
    {
        'userId_role_channelId': '_UserRoleCompounduserId_role_channelIdKeyInner',
    },
    total=True
)

UserRoleWhereUniqueInput = Union[
    '_UserRoleWhereUnique_id_Input',
    '_UserRoleCompounduserId_role_channelIdKey',
]


class UserRoleUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    role: 'enums.Role'
    assignedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    channel: 'ChannelUpdateOneWithoutRelationsInput'
    assigner: 'UserUpdateOneWithoutRelationsInput'


class UserRoleUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    role: 'enums.Role'
    assignedAt: datetime.datetime


class UserRoleUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserRoleCreateWithoutRelationsInput']
    connect: List['UserRoleWhereUniqueInput']
    connect_or_create: List['UserRoleConnectOrCreateWithoutRelationsInput']
    set: List['UserRoleWhereUniqueInput']
    disconnect: List['UserRoleWhereUniqueInput']
    delete: List['UserRoleWhereUniqueInput']

    # TODO
    # update: List['UserRoleUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserRoleUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserRoleScalarWhereInput']
    # upsert: List['UserRoleUpserteWithWhereUniqueWithoutRelationsInput']


class UserRoleUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserRoleCreateWithoutRelationsInput'
    connect: 'UserRoleWhereUniqueInput'
    connect_or_create: 'UserRoleConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserRoleUpdateInput'
    # upsert: 'UserRoleUpsertWithoutRelationsInput'


class UserRoleUpsertInput(TypedDict):
    create: 'UserRoleCreateInput'
    update: 'UserRoleUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserRole_id_OrderByInput = TypedDict(
    '_UserRole_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_UserRole_role_OrderByInput = TypedDict(
    '_UserRole_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_UserRole_channelId_OrderByInput = TypedDict(
    '_UserRole_channelId_OrderByInput',
    {
        'channelId': 'SortOrder',
    },
    total=True
)

_UserRole_assignedAt_OrderByInput = TypedDict(
    '_UserRole_assignedAt_OrderByInput',
    {
        'assignedAt': 'SortOrder',
    },
    total=True
)

_UserRole_assignedBy_OrderByInput = TypedDict(
    '_UserRole_assignedBy_OrderByInput',
    {
        'assignedBy': 'SortOrder',
    },
    total=True
)

_UserRole_userId_OrderByInput = TypedDict(
    '_UserRole_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_UserRole_RelevanceInner = TypedDict(
    '_UserRole_RelevanceInner',
    {
        'fields': 'List[UserRoleScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_UserRole_RelevanceOrderByInput = TypedDict(
    '_UserRole_RelevanceOrderByInput',
    {
        '_relevance': '_UserRole_RelevanceInner',
    },
    total=True
)

UserRoleOrderByInput = Union[
    '_UserRole_id_OrderByInput',
    '_UserRole_role_OrderByInput',
    '_UserRole_channelId_OrderByInput',
    '_UserRole_assignedAt_OrderByInput',
    '_UserRole_assignedBy_OrderByInput',
    '_UserRole_userId_OrderByInput',
    '_UserRole_RelevanceOrderByInput',
]



# recursive UserRole types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRoleRelationFilter = TypedDict(
    'UserRoleRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserRoleListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserRoleInclude(TypedDict, total=False):
    """UserRole relational arguments"""
    user: Union[bool, 'UserArgsFromUserRole']
    channel: Union[bool, 'ChannelArgsFromUserRole']
    assigner: Union[bool, 'UserArgsFromUserRole']


    

class UserIncludeFromUserRole(TypedDict, total=False):
    """Relational arguments for UserRole"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRoleRecursive1']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromUserRoleRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRoleRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRoleRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRoleRecursive1']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromUserRoleRecursive1']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromUserRoleRecursive1']


class UserIncludeFromUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for UserRole"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRoleRecursive2']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromUserRoleRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRoleRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRoleRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRoleRecursive2']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromUserRoleRecursive2']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromUserRoleRecursive2']


class UserIncludeFromUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for UserRole"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRoleRecursive3']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromUserRoleRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRoleRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRoleRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRoleRecursive3']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromUserRoleRecursive3']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromUserRoleRecursive3']


class UserIncludeFromUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for UserRole"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRoleRecursive4']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromUserRoleRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRoleRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRoleRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRoleRecursive4']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromUserRoleRecursive4']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromUserRoleRecursive4']


class UserIncludeFromUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for UserRole"""

    

class UserArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    
    

class FindManyUserArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserRoleIncludeFromUserRole(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive1']
    channel: Union[bool, 'ChannelArgsFromUserRoleRecursive1']
    assigner: Union[bool, 'UserArgsFromUserRoleRecursive1']


class UserRoleIncludeFromUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive2']
    channel: Union[bool, 'ChannelArgsFromUserRoleRecursive2']
    assigner: Union[bool, 'UserArgsFromUserRoleRecursive2']


class UserRoleIncludeFromUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive3']
    channel: Union[bool, 'ChannelArgsFromUserRoleRecursive3']
    assigner: Union[bool, 'UserArgsFromUserRoleRecursive3']


class UserRoleIncludeFromUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive4']
    channel: Union[bool, 'ChannelArgsFromUserRoleRecursive4']
    assigner: Union[bool, 'UserArgsFromUserRoleRecursive4']


class UserRoleIncludeFromUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for UserRole"""

    

class UserRoleArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class UserRoleArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class UserRoleArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class UserRoleArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class UserRoleArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    
    

class FindManyUserRoleArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class FindManyUserRoleArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class FindManyUserRoleArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class FindManyUserRoleArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class FindManyUserRoleArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    
    

class AdminActionIncludeFromUserRole(TypedDict, total=False):
    """Relational arguments for UserRole"""
    admin: Union[bool, 'UserArgsFromUserRoleRecursive1']


class AdminActionIncludeFromUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for UserRole"""
    admin: Union[bool, 'UserArgsFromUserRoleRecursive2']


class AdminActionIncludeFromUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for UserRole"""
    admin: Union[bool, 'UserArgsFromUserRoleRecursive3']


class AdminActionIncludeFromUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for UserRole"""
    admin: Union[bool, 'UserArgsFromUserRoleRecursive4']


class AdminActionIncludeFromUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for UserRole"""

    

class AdminActionArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class AdminActionArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class AdminActionArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class AdminActionArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class AdminActionArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    
    

class FindManyAdminActionArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class FindManyAdminActionArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class FindManyAdminActionArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class FindManyAdminActionArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class FindManyAdminActionArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    
    

class ChannelIncludeFromUserRole(TypedDict, total=False):
    """Relational arguments for UserRole"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRoleRecursive1']
    members: Union[bool, 'FindManyChannelMemberArgsFromUserRoleRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRoleRecursive1']


class ChannelIncludeFromUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for UserRole"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRoleRecursive2']
    members: Union[bool, 'FindManyChannelMemberArgsFromUserRoleRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRoleRecursive2']


class ChannelIncludeFromUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for UserRole"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRoleRecursive3']
    members: Union[bool, 'FindManyChannelMemberArgsFromUserRoleRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRoleRecursive3']


class ChannelIncludeFromUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for UserRole"""
    messages: Union[bool, 'FindManyMessageArgsFromUserRoleRecursive4']
    members: Union[bool, 'FindManyChannelMemberArgsFromUserRoleRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromUserRoleRecursive4']


class ChannelIncludeFromUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for UserRole"""

    

class ChannelArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'ChannelIncludeFromChannelRecursive1'


class ChannelArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'ChannelIncludeFromChannelRecursive2'


class ChannelArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'ChannelIncludeFromChannelRecursive3'


class ChannelArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'ChannelIncludeFromChannelRecursive4'


class ChannelArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    
    

class FindManyChannelArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive1'


class FindManyChannelArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive2'


class FindManyChannelArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive3'


class FindManyChannelArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive4'


class FindManyChannelArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    
    

class MessageIncludeFromUserRole(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive1']
    channel: Union[bool, 'ChannelArgsFromUserRoleRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRoleRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRoleRecursive1']


class MessageIncludeFromUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive2']
    channel: Union[bool, 'ChannelArgsFromUserRoleRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRoleRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRoleRecursive2']


class MessageIncludeFromUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive3']
    channel: Union[bool, 'ChannelArgsFromUserRoleRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRoleRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRoleRecursive3']


class MessageIncludeFromUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive4']
    channel: Union[bool, 'ChannelArgsFromUserRoleRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromUserRoleRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromUserRoleRecursive4']


class MessageIncludeFromUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for UserRole"""

    

class MessageArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    
    

class FindManyMessageArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class ChannelMemberIncludeFromUserRole(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive1']
    channel: Union[bool, 'ChannelArgsFromUserRoleRecursive1']


class ChannelMemberIncludeFromUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive2']
    channel: Union[bool, 'ChannelArgsFromUserRoleRecursive2']


class ChannelMemberIncludeFromUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive3']
    channel: Union[bool, 'ChannelArgsFromUserRoleRecursive3']


class ChannelMemberIncludeFromUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive4']
    channel: Union[bool, 'ChannelArgsFromUserRoleRecursive4']


class ChannelMemberIncludeFromUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for UserRole"""

    

class ChannelMemberArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class ChannelMemberArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class ChannelMemberArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class ChannelMemberArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class ChannelMemberArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    
    

class FindManyChannelMemberArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class FindManyChannelMemberArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class FindManyChannelMemberArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class FindManyChannelMemberArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class FindManyChannelMemberArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    
    

class MentionIncludeFromUserRole(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive1']
    message: Union[bool, 'MessageArgsFromUserRoleRecursive1']


class MentionIncludeFromUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive2']
    message: Union[bool, 'MessageArgsFromUserRoleRecursive2']


class MentionIncludeFromUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive3']
    message: Union[bool, 'MessageArgsFromUserRoleRecursive3']


class MentionIncludeFromUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive4']
    message: Union[bool, 'MessageArgsFromUserRoleRecursive4']


class MentionIncludeFromUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for UserRole"""

    

class MentionArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'MentionIncludeFromMentionRecursive1'


class MentionArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'MentionIncludeFromMentionRecursive2'


class MentionArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'MentionIncludeFromMentionRecursive3'


class MentionArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'MentionIncludeFromMentionRecursive4'


class MentionArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    
    

class FindManyMentionArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive1'


class FindManyMentionArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive2'


class FindManyMentionArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive3'


class FindManyMentionArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive4'


class FindManyMentionArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    
    

class MessageReactionIncludeFromUserRole(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive1']
    message: Union[bool, 'MessageArgsFromUserRoleRecursive1']


class MessageReactionIncludeFromUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive2']
    message: Union[bool, 'MessageArgsFromUserRoleRecursive2']


class MessageReactionIncludeFromUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive3']
    message: Union[bool, 'MessageArgsFromUserRoleRecursive3']


class MessageReactionIncludeFromUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for UserRole"""
    user: Union[bool, 'UserArgsFromUserRoleRecursive4']
    message: Union[bool, 'MessageArgsFromUserRoleRecursive4']


class MessageReactionIncludeFromUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for UserRole"""

    

class MessageReactionArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class MessageReactionArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class MessageReactionArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class MessageReactionArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class MessageReactionArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    
    

class FindManyMessageReactionArgsFromUserRole(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class FindManyMessageReactionArgsFromUserRoleRecursive1(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class FindManyMessageReactionArgsFromUserRoleRecursive2(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class FindManyMessageReactionArgsFromUserRoleRecursive3(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class FindManyMessageReactionArgsFromUserRoleRecursive4(TypedDict, total=False):
    """Arguments for UserRole"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    


FindManyUserRoleArgs = FindManyUserRoleArgsFromUserRole
FindFirstUserRoleArgs = FindManyUserRoleArgsFromUserRole


    

class UserRoleWhereInput(TypedDict, total=False):
    """UserRole arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    channelId: Union[None, _str, 'types.StringFilter']
    assignedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    assignedBy: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'
    assigner: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserRoleWhereInputRecursive1', List['UserRoleWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserRoleWhereInputRecursive1']
    OR: List['UserRoleWhereInputRecursive1']
    NOT: List['UserRoleWhereInputRecursive1']


class UserRoleWhereInputRecursive1(TypedDict, total=False):
    """UserRole arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    channelId: Union[None, _str, 'types.StringFilter']
    assignedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    assignedBy: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'
    assigner: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserRoleWhereInputRecursive2', List['UserRoleWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserRoleWhereInputRecursive2']
    OR: List['UserRoleWhereInputRecursive2']
    NOT: List['UserRoleWhereInputRecursive2']


class UserRoleWhereInputRecursive2(TypedDict, total=False):
    """UserRole arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    channelId: Union[None, _str, 'types.StringFilter']
    assignedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    assignedBy: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'
    assigner: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserRoleWhereInputRecursive3', List['UserRoleWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserRoleWhereInputRecursive3']
    OR: List['UserRoleWhereInputRecursive3']
    NOT: List['UserRoleWhereInputRecursive3']


class UserRoleWhereInputRecursive3(TypedDict, total=False):
    """UserRole arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    channelId: Union[None, _str, 'types.StringFilter']
    assignedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    assignedBy: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'
    assigner: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['UserRoleWhereInputRecursive4', List['UserRoleWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserRoleWhereInputRecursive4']
    OR: List['UserRoleWhereInputRecursive4']
    NOT: List['UserRoleWhereInputRecursive4']


class UserRoleWhereInputRecursive4(TypedDict, total=False):
    """UserRole arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    channelId: Union[None, _str, 'types.StringFilter']
    assignedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    assignedBy: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'
    assigner: 'UserRelationFilter'



# aggregate UserRole types


    

class UserRoleScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserRole arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    channelId: Union[_str, 'types.StringWithAggregatesFilter']
    assignedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    assignedBy: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserRoleScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserRoleScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserRoleScalarWhereWithAggregatesInputRecursive1']


class UserRoleScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserRole arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    channelId: Union[_str, 'types.StringWithAggregatesFilter']
    assignedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    assignedBy: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserRoleScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserRoleScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserRoleScalarWhereWithAggregatesInputRecursive2']


class UserRoleScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserRole arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    channelId: Union[_str, 'types.StringWithAggregatesFilter']
    assignedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    assignedBy: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserRoleScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserRoleScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserRoleScalarWhereWithAggregatesInputRecursive3']


class UserRoleScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserRole arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    channelId: Union[_str, 'types.StringWithAggregatesFilter']
    assignedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    assignedBy: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserRoleScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserRoleScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserRoleScalarWhereWithAggregatesInputRecursive4']


class UserRoleScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserRole arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    channelId: Union[_str, 'types.StringWithAggregatesFilter']
    assignedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    assignedBy: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']



class UserRoleGroupByOutput(TypedDict, total=False):
    id: _str
    role: 'enums.Role'
    channelId: _str
    assignedAt: datetime.datetime
    assignedBy: _str
    userId: _str
    _sum: 'UserRoleSumAggregateOutput'
    _avg: 'UserRoleAvgAggregateOutput'
    _min: 'UserRoleMinAggregateOutput'
    _max: 'UserRoleMaxAggregateOutput'
    _count: 'UserRoleCountAggregateOutput'


class UserRoleAvgAggregateOutput(TypedDict, total=False):
    """UserRole output for aggregating averages"""


class UserRoleSumAggregateOutput(TypedDict, total=False):
    """UserRole output for aggregating sums"""


class UserRoleScalarAggregateOutput(TypedDict, total=False):
    """UserRole output including scalar fields"""
    id: _str
    role: 'enums.Role'
    channelId: _str
    assignedAt: datetime.datetime
    assignedBy: _str
    userId: _str


UserRoleMinAggregateOutput = UserRoleScalarAggregateOutput
UserRoleMaxAggregateOutput = UserRoleScalarAggregateOutput


class UserRoleMaxAggregateInput(TypedDict, total=False):
    """UserRole input for aggregating by max"""
    id: bool
    role: bool
    channelId: bool
    assignedAt: bool
    assignedBy: bool
    userId: bool


class UserRoleMinAggregateInput(TypedDict, total=False):
    """UserRole input for aggregating by min"""
    id: bool
    role: bool
    channelId: bool
    assignedAt: bool
    assignedBy: bool
    userId: bool


class UserRoleNumberAggregateInput(TypedDict, total=False):
    """UserRole input for aggregating numbers"""


UserRoleAvgAggregateInput = UserRoleNumberAggregateInput
UserRoleSumAggregateInput = UserRoleNumberAggregateInput


UserRoleCountAggregateInput = TypedDict(
    'UserRoleCountAggregateInput',
    {
        'id': bool,
        'role': bool,
        'channelId': bool,
        'assignedAt': bool,
        'assignedBy': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

UserRoleCountAggregateOutput = TypedDict(
    'UserRoleCountAggregateOutput',
    {
        'id': int,
        'role': int,
        'channelId': int,
        'assignedAt': int,
        'assignedBy': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


UserRoleKeys = Literal[
    'id',
    'role',
    'channelId',
    'assignedAt',
    'assignedBy',
    'userId',
    'user',
    'channel',
    'assigner',
]
UserRoleScalarFieldKeys = Literal[
    'id',
    'role',
    'channelId',
    'assignedAt',
    'assignedBy',
    'userId',
]
UserRoleScalarFieldKeysT = TypeVar('UserRoleScalarFieldKeysT', bound=UserRoleScalarFieldKeys)

UserRoleRelationalFieldKeys = Literal[
        'user',
        'channel',
        'assigner',
    ]

# AdminAction types

class AdminActionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the AdminAction create method"""
    id: _str
    reason: Optional[_str]
    metadata: Optional['fields.Json']
    createdAt: datetime.datetime
    adminId: _str
    admin: 'UserCreateNestedWithoutRelationsInput'


class AdminActionCreateInput(AdminActionOptionalCreateInput):
    """Required arguments to the AdminAction create method"""
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AdminActionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the AdminAction create method, without relations"""
    id: _str
    reason: Optional[_str]
    metadata: Optional['fields.Json']
    createdAt: datetime.datetime
    adminId: _str


class AdminActionCreateWithoutRelationsInput(AdminActionOptionalCreateWithoutRelationsInput):
    """Required arguments to the AdminAction create method, without relations"""
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: _str

class AdminActionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AdminActionCreateWithoutRelationsInput'
    where: 'AdminActionWhereUniqueInput'

class AdminActionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AdminActionCreateWithoutRelationsInput'
    connect: 'AdminActionWhereUniqueInput'
    connect_or_create: 'AdminActionConnectOrCreateWithoutRelationsInput'


class AdminActionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AdminActionCreateWithoutRelationsInput', List['AdminActionCreateWithoutRelationsInput']]
    connect: Union['AdminActionWhereUniqueInput', List['AdminActionWhereUniqueInput']]
    connect_or_create: Union['AdminActionConnectOrCreateWithoutRelationsInput', List['AdminActionConnectOrCreateWithoutRelationsInput']]

_AdminActionWhereUnique_id_Input = TypedDict(
    '_AdminActionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

AdminActionWhereUniqueInput = _AdminActionWhereUnique_id_Input


class AdminActionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: _str
    reason: Optional[_str]
    metadata: Optional['fields.Json']
    createdAt: datetime.datetime
    admin: 'UserUpdateOneWithoutRelationsInput'


class AdminActionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: _str
    reason: Optional[_str]
    metadata: Optional['fields.Json']
    createdAt: datetime.datetime


class AdminActionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AdminActionCreateWithoutRelationsInput']
    connect: List['AdminActionWhereUniqueInput']
    connect_or_create: List['AdminActionConnectOrCreateWithoutRelationsInput']
    set: List['AdminActionWhereUniqueInput']
    disconnect: List['AdminActionWhereUniqueInput']
    delete: List['AdminActionWhereUniqueInput']

    # TODO
    # update: List['AdminActionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AdminActionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AdminActionScalarWhereInput']
    # upsert: List['AdminActionUpserteWithWhereUniqueWithoutRelationsInput']


class AdminActionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AdminActionCreateWithoutRelationsInput'
    connect: 'AdminActionWhereUniqueInput'
    connect_or_create: 'AdminActionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AdminActionUpdateInput'
    # upsert: 'AdminActionUpsertWithoutRelationsInput'


class AdminActionUpsertInput(TypedDict):
    create: 'AdminActionCreateInput'
    update: 'AdminActionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_AdminAction_id_OrderByInput = TypedDict(
    '_AdminAction_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_AdminAction_action_OrderByInput = TypedDict(
    '_AdminAction_action_OrderByInput',
    {
        'action': 'SortOrder',
    },
    total=True
)

_AdminAction_targetType_OrderByInput = TypedDict(
    '_AdminAction_targetType_OrderByInput',
    {
        'targetType': 'SortOrder',
    },
    total=True
)

_AdminAction_targetId_OrderByInput = TypedDict(
    '_AdminAction_targetId_OrderByInput',
    {
        'targetId': 'SortOrder',
    },
    total=True
)

_AdminAction_reason_OrderByInput = TypedDict(
    '_AdminAction_reason_OrderByInput',
    {
        'reason': 'SortOrder',
    },
    total=True
)

_AdminAction_metadata_OrderByInput = TypedDict(
    '_AdminAction_metadata_OrderByInput',
    {
        'metadata': 'SortOrder',
    },
    total=True
)

_AdminAction_createdAt_OrderByInput = TypedDict(
    '_AdminAction_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_AdminAction_adminId_OrderByInput = TypedDict(
    '_AdminAction_adminId_OrderByInput',
    {
        'adminId': 'SortOrder',
    },
    total=True
)

_AdminAction_RelevanceInner = TypedDict(
    '_AdminAction_RelevanceInner',
    {
        'fields': 'List[AdminActionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_AdminAction_RelevanceOrderByInput = TypedDict(
    '_AdminAction_RelevanceOrderByInput',
    {
        '_relevance': '_AdminAction_RelevanceInner',
    },
    total=True
)

AdminActionOrderByInput = Union[
    '_AdminAction_id_OrderByInput',
    '_AdminAction_action_OrderByInput',
    '_AdminAction_targetType_OrderByInput',
    '_AdminAction_targetId_OrderByInput',
    '_AdminAction_reason_OrderByInput',
    '_AdminAction_metadata_OrderByInput',
    '_AdminAction_createdAt_OrderByInput',
    '_AdminAction_adminId_OrderByInput',
    '_AdminAction_RelevanceOrderByInput',
]



# recursive AdminAction types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AdminActionRelationFilter = TypedDict(
    'AdminActionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AdminActionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AdminActionInclude(TypedDict, total=False):
    """AdminAction relational arguments"""
    admin: Union[bool, 'UserArgsFromAdminAction']


    

class UserIncludeFromAdminAction(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    messages: Union[bool, 'FindManyMessageArgsFromAdminActionRecursive1']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromAdminActionRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromAdminActionRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromAdminActionRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromAdminActionRecursive1']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromAdminActionRecursive1']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromAdminActionRecursive1']


class UserIncludeFromAdminActionRecursive1(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    messages: Union[bool, 'FindManyMessageArgsFromAdminActionRecursive2']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromAdminActionRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromAdminActionRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromAdminActionRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromAdminActionRecursive2']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromAdminActionRecursive2']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromAdminActionRecursive2']


class UserIncludeFromAdminActionRecursive2(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    messages: Union[bool, 'FindManyMessageArgsFromAdminActionRecursive3']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromAdminActionRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromAdminActionRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromAdminActionRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromAdminActionRecursive3']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromAdminActionRecursive3']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromAdminActionRecursive3']


class UserIncludeFromAdminActionRecursive3(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    messages: Union[bool, 'FindManyMessageArgsFromAdminActionRecursive4']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromAdminActionRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromAdminActionRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromAdminActionRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromAdminActionRecursive4']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromAdminActionRecursive4']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromAdminActionRecursive4']


class UserIncludeFromAdminActionRecursive4(TypedDict, total=False):
    """Relational arguments for AdminAction"""

    

class UserArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    
    

class FindManyUserArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserRoleIncludeFromAdminAction(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive1']
    channel: Union[bool, 'ChannelArgsFromAdminActionRecursive1']
    assigner: Union[bool, 'UserArgsFromAdminActionRecursive1']


class UserRoleIncludeFromAdminActionRecursive1(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive2']
    channel: Union[bool, 'ChannelArgsFromAdminActionRecursive2']
    assigner: Union[bool, 'UserArgsFromAdminActionRecursive2']


class UserRoleIncludeFromAdminActionRecursive2(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive3']
    channel: Union[bool, 'ChannelArgsFromAdminActionRecursive3']
    assigner: Union[bool, 'UserArgsFromAdminActionRecursive3']


class UserRoleIncludeFromAdminActionRecursive3(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive4']
    channel: Union[bool, 'ChannelArgsFromAdminActionRecursive4']
    assigner: Union[bool, 'UserArgsFromAdminActionRecursive4']


class UserRoleIncludeFromAdminActionRecursive4(TypedDict, total=False):
    """Relational arguments for AdminAction"""

    

class UserRoleArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class UserRoleArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class UserRoleArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class UserRoleArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class UserRoleArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    
    

class FindManyUserRoleArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class FindManyUserRoleArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class FindManyUserRoleArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class FindManyUserRoleArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class FindManyUserRoleArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    
    

class AdminActionIncludeFromAdminAction(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    admin: Union[bool, 'UserArgsFromAdminActionRecursive1']


class AdminActionIncludeFromAdminActionRecursive1(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    admin: Union[bool, 'UserArgsFromAdminActionRecursive2']


class AdminActionIncludeFromAdminActionRecursive2(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    admin: Union[bool, 'UserArgsFromAdminActionRecursive3']


class AdminActionIncludeFromAdminActionRecursive3(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    admin: Union[bool, 'UserArgsFromAdminActionRecursive4']


class AdminActionIncludeFromAdminActionRecursive4(TypedDict, total=False):
    """Relational arguments for AdminAction"""

    

class AdminActionArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class AdminActionArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class AdminActionArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class AdminActionArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class AdminActionArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    
    

class FindManyAdminActionArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class FindManyAdminActionArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class FindManyAdminActionArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class FindManyAdminActionArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class FindManyAdminActionArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    
    

class ChannelIncludeFromAdminAction(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    messages: Union[bool, 'FindManyMessageArgsFromAdminActionRecursive1']
    members: Union[bool, 'FindManyChannelMemberArgsFromAdminActionRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromAdminActionRecursive1']


class ChannelIncludeFromAdminActionRecursive1(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    messages: Union[bool, 'FindManyMessageArgsFromAdminActionRecursive2']
    members: Union[bool, 'FindManyChannelMemberArgsFromAdminActionRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromAdminActionRecursive2']


class ChannelIncludeFromAdminActionRecursive2(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    messages: Union[bool, 'FindManyMessageArgsFromAdminActionRecursive3']
    members: Union[bool, 'FindManyChannelMemberArgsFromAdminActionRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromAdminActionRecursive3']


class ChannelIncludeFromAdminActionRecursive3(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    messages: Union[bool, 'FindManyMessageArgsFromAdminActionRecursive4']
    members: Union[bool, 'FindManyChannelMemberArgsFromAdminActionRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromAdminActionRecursive4']


class ChannelIncludeFromAdminActionRecursive4(TypedDict, total=False):
    """Relational arguments for AdminAction"""

    

class ChannelArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'ChannelIncludeFromChannelRecursive1'


class ChannelArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'ChannelIncludeFromChannelRecursive2'


class ChannelArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'ChannelIncludeFromChannelRecursive3'


class ChannelArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'ChannelIncludeFromChannelRecursive4'


class ChannelArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    
    

class FindManyChannelArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive1'


class FindManyChannelArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive2'


class FindManyChannelArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive3'


class FindManyChannelArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive4'


class FindManyChannelArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    
    

class MessageIncludeFromAdminAction(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive1']
    channel: Union[bool, 'ChannelArgsFromAdminActionRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromAdminActionRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromAdminActionRecursive1']


class MessageIncludeFromAdminActionRecursive1(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive2']
    channel: Union[bool, 'ChannelArgsFromAdminActionRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromAdminActionRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromAdminActionRecursive2']


class MessageIncludeFromAdminActionRecursive2(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive3']
    channel: Union[bool, 'ChannelArgsFromAdminActionRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromAdminActionRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromAdminActionRecursive3']


class MessageIncludeFromAdminActionRecursive3(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive4']
    channel: Union[bool, 'ChannelArgsFromAdminActionRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromAdminActionRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromAdminActionRecursive4']


class MessageIncludeFromAdminActionRecursive4(TypedDict, total=False):
    """Relational arguments for AdminAction"""

    

class MessageArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    
    

class FindManyMessageArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class ChannelMemberIncludeFromAdminAction(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive1']
    channel: Union[bool, 'ChannelArgsFromAdminActionRecursive1']


class ChannelMemberIncludeFromAdminActionRecursive1(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive2']
    channel: Union[bool, 'ChannelArgsFromAdminActionRecursive2']


class ChannelMemberIncludeFromAdminActionRecursive2(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive3']
    channel: Union[bool, 'ChannelArgsFromAdminActionRecursive3']


class ChannelMemberIncludeFromAdminActionRecursive3(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive4']
    channel: Union[bool, 'ChannelArgsFromAdminActionRecursive4']


class ChannelMemberIncludeFromAdminActionRecursive4(TypedDict, total=False):
    """Relational arguments for AdminAction"""

    

class ChannelMemberArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class ChannelMemberArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class ChannelMemberArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class ChannelMemberArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class ChannelMemberArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    
    

class FindManyChannelMemberArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class FindManyChannelMemberArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class FindManyChannelMemberArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class FindManyChannelMemberArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class FindManyChannelMemberArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    
    

class MentionIncludeFromAdminAction(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive1']
    message: Union[bool, 'MessageArgsFromAdminActionRecursive1']


class MentionIncludeFromAdminActionRecursive1(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive2']
    message: Union[bool, 'MessageArgsFromAdminActionRecursive2']


class MentionIncludeFromAdminActionRecursive2(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive3']
    message: Union[bool, 'MessageArgsFromAdminActionRecursive3']


class MentionIncludeFromAdminActionRecursive3(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive4']
    message: Union[bool, 'MessageArgsFromAdminActionRecursive4']


class MentionIncludeFromAdminActionRecursive4(TypedDict, total=False):
    """Relational arguments for AdminAction"""

    

class MentionArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'MentionIncludeFromMentionRecursive1'


class MentionArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'MentionIncludeFromMentionRecursive2'


class MentionArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'MentionIncludeFromMentionRecursive3'


class MentionArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'MentionIncludeFromMentionRecursive4'


class MentionArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    
    

class FindManyMentionArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive1'


class FindManyMentionArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive2'


class FindManyMentionArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive3'


class FindManyMentionArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive4'


class FindManyMentionArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    
    

class MessageReactionIncludeFromAdminAction(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive1']
    message: Union[bool, 'MessageArgsFromAdminActionRecursive1']


class MessageReactionIncludeFromAdminActionRecursive1(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive2']
    message: Union[bool, 'MessageArgsFromAdminActionRecursive2']


class MessageReactionIncludeFromAdminActionRecursive2(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive3']
    message: Union[bool, 'MessageArgsFromAdminActionRecursive3']


class MessageReactionIncludeFromAdminActionRecursive3(TypedDict, total=False):
    """Relational arguments for AdminAction"""
    user: Union[bool, 'UserArgsFromAdminActionRecursive4']
    message: Union[bool, 'MessageArgsFromAdminActionRecursive4']


class MessageReactionIncludeFromAdminActionRecursive4(TypedDict, total=False):
    """Relational arguments for AdminAction"""

    

class MessageReactionArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class MessageReactionArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class MessageReactionArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class MessageReactionArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class MessageReactionArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    
    

class FindManyMessageReactionArgsFromAdminAction(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class FindManyMessageReactionArgsFromAdminActionRecursive1(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class FindManyMessageReactionArgsFromAdminActionRecursive2(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class FindManyMessageReactionArgsFromAdminActionRecursive3(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class FindManyMessageReactionArgsFromAdminActionRecursive4(TypedDict, total=False):
    """Arguments for AdminAction"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    


FindManyAdminActionArgs = FindManyAdminActionArgsFromAdminAction
FindFirstAdminActionArgs = FindManyAdminActionArgsFromAdminAction


    

class AdminActionWhereInput(TypedDict, total=False):
    """AdminAction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: Union[_str, 'types.StringFilter']
    reason: Union[None, _str, 'types.StringFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    adminId: Union[_str, 'types.StringFilter']
    admin: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AdminActionWhereInputRecursive1', List['AdminActionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AdminActionWhereInputRecursive1']
    OR: List['AdminActionWhereInputRecursive1']
    NOT: List['AdminActionWhereInputRecursive1']


class AdminActionWhereInputRecursive1(TypedDict, total=False):
    """AdminAction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: Union[_str, 'types.StringFilter']
    reason: Union[None, _str, 'types.StringFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    adminId: Union[_str, 'types.StringFilter']
    admin: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AdminActionWhereInputRecursive2', List['AdminActionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AdminActionWhereInputRecursive2']
    OR: List['AdminActionWhereInputRecursive2']
    NOT: List['AdminActionWhereInputRecursive2']


class AdminActionWhereInputRecursive2(TypedDict, total=False):
    """AdminAction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: Union[_str, 'types.StringFilter']
    reason: Union[None, _str, 'types.StringFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    adminId: Union[_str, 'types.StringFilter']
    admin: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AdminActionWhereInputRecursive3', List['AdminActionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AdminActionWhereInputRecursive3']
    OR: List['AdminActionWhereInputRecursive3']
    NOT: List['AdminActionWhereInputRecursive3']


class AdminActionWhereInputRecursive3(TypedDict, total=False):
    """AdminAction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: Union[_str, 'types.StringFilter']
    reason: Union[None, _str, 'types.StringFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    adminId: Union[_str, 'types.StringFilter']
    admin: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AdminActionWhereInputRecursive4', List['AdminActionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AdminActionWhereInputRecursive4']
    OR: List['AdminActionWhereInputRecursive4']
    NOT: List['AdminActionWhereInputRecursive4']


class AdminActionWhereInputRecursive4(TypedDict, total=False):
    """AdminAction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: Union[_str, 'types.StringFilter']
    reason: Union[None, _str, 'types.StringFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    adminId: Union[_str, 'types.StringFilter']
    admin: 'UserRelationFilter'



# aggregate AdminAction types


    

class AdminActionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """AdminAction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: Union[_str, 'types.StringWithAggregatesFilter']
    reason: Union[_str, 'types.StringWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    adminId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AdminActionScalarWhereWithAggregatesInputRecursive1']
    OR: List['AdminActionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AdminActionScalarWhereWithAggregatesInputRecursive1']


class AdminActionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """AdminAction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: Union[_str, 'types.StringWithAggregatesFilter']
    reason: Union[_str, 'types.StringWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    adminId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AdminActionScalarWhereWithAggregatesInputRecursive2']
    OR: List['AdminActionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AdminActionScalarWhereWithAggregatesInputRecursive2']


class AdminActionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """AdminAction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: Union[_str, 'types.StringWithAggregatesFilter']
    reason: Union[_str, 'types.StringWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    adminId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AdminActionScalarWhereWithAggregatesInputRecursive3']
    OR: List['AdminActionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AdminActionScalarWhereWithAggregatesInputRecursive3']


class AdminActionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """AdminAction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: Union[_str, 'types.StringWithAggregatesFilter']
    reason: Union[_str, 'types.StringWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    adminId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AdminActionScalarWhereWithAggregatesInputRecursive4']
    OR: List['AdminActionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AdminActionScalarWhereWithAggregatesInputRecursive4']


class AdminActionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """AdminAction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: Union[_str, 'types.StringWithAggregatesFilter']
    reason: Union[_str, 'types.StringWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    adminId: Union[_str, 'types.StringWithAggregatesFilter']



class AdminActionGroupByOutput(TypedDict, total=False):
    id: _str
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: _str
    reason: _str
    metadata: 'fields.Json'
    createdAt: datetime.datetime
    adminId: _str
    _sum: 'AdminActionSumAggregateOutput'
    _avg: 'AdminActionAvgAggregateOutput'
    _min: 'AdminActionMinAggregateOutput'
    _max: 'AdminActionMaxAggregateOutput'
    _count: 'AdminActionCountAggregateOutput'


class AdminActionAvgAggregateOutput(TypedDict, total=False):
    """AdminAction output for aggregating averages"""


class AdminActionSumAggregateOutput(TypedDict, total=False):
    """AdminAction output for aggregating sums"""


class AdminActionScalarAggregateOutput(TypedDict, total=False):
    """AdminAction output including scalar fields"""
    id: _str
    action: 'enums.AdminActionType'
    targetType: 'enums.AdminTargetType'
    targetId: _str
    reason: _str
    metadata: 'fields.Json'
    createdAt: datetime.datetime
    adminId: _str


AdminActionMinAggregateOutput = AdminActionScalarAggregateOutput
AdminActionMaxAggregateOutput = AdminActionScalarAggregateOutput


class AdminActionMaxAggregateInput(TypedDict, total=False):
    """AdminAction input for aggregating by max"""
    id: bool
    action: bool
    targetType: bool
    targetId: bool
    reason: bool
    metadata: bool
    createdAt: bool
    adminId: bool


class AdminActionMinAggregateInput(TypedDict, total=False):
    """AdminAction input for aggregating by min"""
    id: bool
    action: bool
    targetType: bool
    targetId: bool
    reason: bool
    metadata: bool
    createdAt: bool
    adminId: bool


class AdminActionNumberAggregateInput(TypedDict, total=False):
    """AdminAction input for aggregating numbers"""


AdminActionAvgAggregateInput = AdminActionNumberAggregateInput
AdminActionSumAggregateInput = AdminActionNumberAggregateInput


AdminActionCountAggregateInput = TypedDict(
    'AdminActionCountAggregateInput',
    {
        'id': bool,
        'action': bool,
        'targetType': bool,
        'targetId': bool,
        'reason': bool,
        'metadata': bool,
        'createdAt': bool,
        'adminId': bool,
        '_all': bool,
    },
    total=False,
)

AdminActionCountAggregateOutput = TypedDict(
    'AdminActionCountAggregateOutput',
    {
        'id': int,
        'action': int,
        'targetType': int,
        'targetId': int,
        'reason': int,
        'metadata': int,
        'createdAt': int,
        'adminId': int,
        '_all': int,
    },
    total=False,
)


AdminActionKeys = Literal[
    'id',
    'action',
    'targetType',
    'targetId',
    'reason',
    'metadata',
    'createdAt',
    'adminId',
    'admin',
]
AdminActionScalarFieldKeys = Literal[
    'id',
    'action',
    'targetType',
    'targetId',
    'reason',
    'metadata',
    'createdAt',
    'adminId',
]
AdminActionScalarFieldKeysT = TypeVar('AdminActionScalarFieldKeysT', bound=AdminActionScalarFieldKeys)

AdminActionRelationalFieldKeys = Literal[
        'admin',
    ]

# Channel types

class ChannelOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Channel create method"""
    id: _str
    description: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    messages: 'MessageCreateManyNestedWithoutRelationsInput'
    members: 'ChannelMemberCreateManyNestedWithoutRelationsInput'
    roles: 'UserRoleCreateManyNestedWithoutRelationsInput'


class ChannelCreateInput(ChannelOptionalCreateInput):
    """Required arguments to the Channel create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ChannelOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Channel create method, without relations"""
    id: _str
    description: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ChannelCreateWithoutRelationsInput(ChannelOptionalCreateWithoutRelationsInput):
    """Required arguments to the Channel create method, without relations"""
    name: _str

class ChannelConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ChannelCreateWithoutRelationsInput'
    where: 'ChannelWhereUniqueInput'

class ChannelCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ChannelCreateWithoutRelationsInput'
    connect: 'ChannelWhereUniqueInput'
    connect_or_create: 'ChannelConnectOrCreateWithoutRelationsInput'


class ChannelCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ChannelCreateWithoutRelationsInput', List['ChannelCreateWithoutRelationsInput']]
    connect: Union['ChannelWhereUniqueInput', List['ChannelWhereUniqueInput']]
    connect_or_create: Union['ChannelConnectOrCreateWithoutRelationsInput', List['ChannelConnectOrCreateWithoutRelationsInput']]

_ChannelWhereUnique_id_Input = TypedDict(
    '_ChannelWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_ChannelWhereUnique_name_Input = TypedDict(
    '_ChannelWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

ChannelWhereUniqueInput = Union[
    '_ChannelWhereUnique_id_Input',
    '_ChannelWhereUnique_name_Input',
]


class ChannelUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    description: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    messages: 'MessageUpdateManyWithoutRelationsInput'
    members: 'ChannelMemberUpdateManyWithoutRelationsInput'
    roles: 'UserRoleUpdateManyWithoutRelationsInput'


class ChannelUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    description: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ChannelUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ChannelCreateWithoutRelationsInput']
    connect: List['ChannelWhereUniqueInput']
    connect_or_create: List['ChannelConnectOrCreateWithoutRelationsInput']
    set: List['ChannelWhereUniqueInput']
    disconnect: List['ChannelWhereUniqueInput']
    delete: List['ChannelWhereUniqueInput']

    # TODO
    # update: List['ChannelUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ChannelUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ChannelScalarWhereInput']
    # upsert: List['ChannelUpserteWithWhereUniqueWithoutRelationsInput']


class ChannelUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ChannelCreateWithoutRelationsInput'
    connect: 'ChannelWhereUniqueInput'
    connect_or_create: 'ChannelConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ChannelUpdateInput'
    # upsert: 'ChannelUpsertWithoutRelationsInput'


class ChannelUpsertInput(TypedDict):
    create: 'ChannelCreateInput'
    update: 'ChannelUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Channel_id_OrderByInput = TypedDict(
    '_Channel_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Channel_name_OrderByInput = TypedDict(
    '_Channel_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Channel_description_OrderByInput = TypedDict(
    '_Channel_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Channel_createdAt_OrderByInput = TypedDict(
    '_Channel_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Channel_updatedAt_OrderByInput = TypedDict(
    '_Channel_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Channel_RelevanceInner = TypedDict(
    '_Channel_RelevanceInner',
    {
        'fields': 'List[ChannelScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Channel_RelevanceOrderByInput = TypedDict(
    '_Channel_RelevanceOrderByInput',
    {
        '_relevance': '_Channel_RelevanceInner',
    },
    total=True
)

ChannelOrderByInput = Union[
    '_Channel_id_OrderByInput',
    '_Channel_name_OrderByInput',
    '_Channel_description_OrderByInput',
    '_Channel_createdAt_OrderByInput',
    '_Channel_updatedAt_OrderByInput',
    '_Channel_RelevanceOrderByInput',
]



# recursive Channel types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ChannelRelationFilter = TypedDict(
    'ChannelRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ChannelListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ChannelInclude(TypedDict, total=False):
    """Channel relational arguments"""
    messages: Union[bool, 'FindManyMessageArgsFromChannel']
    members: Union[bool, 'FindManyChannelMemberArgsFromChannel']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannel']


    

class UserIncludeFromChannel(TypedDict, total=False):
    """Relational arguments for Channel"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelRecursive1']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromChannelRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelRecursive1']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromChannelRecursive1']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromChannelRecursive1']


class UserIncludeFromChannelRecursive1(TypedDict, total=False):
    """Relational arguments for Channel"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelRecursive2']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromChannelRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelRecursive2']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromChannelRecursive2']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromChannelRecursive2']


class UserIncludeFromChannelRecursive2(TypedDict, total=False):
    """Relational arguments for Channel"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelRecursive3']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromChannelRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelRecursive3']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromChannelRecursive3']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromChannelRecursive3']


class UserIncludeFromChannelRecursive3(TypedDict, total=False):
    """Relational arguments for Channel"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelRecursive4']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromChannelRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelRecursive4']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromChannelRecursive4']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromChannelRecursive4']


class UserIncludeFromChannelRecursive4(TypedDict, total=False):
    """Relational arguments for Channel"""

    

class UserArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    
    

class FindManyUserArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserRoleIncludeFromChannel(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive1']
    channel: Union[bool, 'ChannelArgsFromChannelRecursive1']
    assigner: Union[bool, 'UserArgsFromChannelRecursive1']


class UserRoleIncludeFromChannelRecursive1(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive2']
    channel: Union[bool, 'ChannelArgsFromChannelRecursive2']
    assigner: Union[bool, 'UserArgsFromChannelRecursive2']


class UserRoleIncludeFromChannelRecursive2(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive3']
    channel: Union[bool, 'ChannelArgsFromChannelRecursive3']
    assigner: Union[bool, 'UserArgsFromChannelRecursive3']


class UserRoleIncludeFromChannelRecursive3(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive4']
    channel: Union[bool, 'ChannelArgsFromChannelRecursive4']
    assigner: Union[bool, 'UserArgsFromChannelRecursive4']


class UserRoleIncludeFromChannelRecursive4(TypedDict, total=False):
    """Relational arguments for Channel"""

    

class UserRoleArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class UserRoleArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class UserRoleArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class UserRoleArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class UserRoleArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    
    

class FindManyUserRoleArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class FindManyUserRoleArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class FindManyUserRoleArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class FindManyUserRoleArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class FindManyUserRoleArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    
    

class AdminActionIncludeFromChannel(TypedDict, total=False):
    """Relational arguments for Channel"""
    admin: Union[bool, 'UserArgsFromChannelRecursive1']


class AdminActionIncludeFromChannelRecursive1(TypedDict, total=False):
    """Relational arguments for Channel"""
    admin: Union[bool, 'UserArgsFromChannelRecursive2']


class AdminActionIncludeFromChannelRecursive2(TypedDict, total=False):
    """Relational arguments for Channel"""
    admin: Union[bool, 'UserArgsFromChannelRecursive3']


class AdminActionIncludeFromChannelRecursive3(TypedDict, total=False):
    """Relational arguments for Channel"""
    admin: Union[bool, 'UserArgsFromChannelRecursive4']


class AdminActionIncludeFromChannelRecursive4(TypedDict, total=False):
    """Relational arguments for Channel"""

    

class AdminActionArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class AdminActionArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class AdminActionArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class AdminActionArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class AdminActionArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    
    

class FindManyAdminActionArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class FindManyAdminActionArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class FindManyAdminActionArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class FindManyAdminActionArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class FindManyAdminActionArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    
    

class ChannelIncludeFromChannel(TypedDict, total=False):
    """Relational arguments for Channel"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelRecursive1']
    members: Union[bool, 'FindManyChannelMemberArgsFromChannelRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelRecursive1']


class ChannelIncludeFromChannelRecursive1(TypedDict, total=False):
    """Relational arguments for Channel"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelRecursive2']
    members: Union[bool, 'FindManyChannelMemberArgsFromChannelRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelRecursive2']


class ChannelIncludeFromChannelRecursive2(TypedDict, total=False):
    """Relational arguments for Channel"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelRecursive3']
    members: Union[bool, 'FindManyChannelMemberArgsFromChannelRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelRecursive3']


class ChannelIncludeFromChannelRecursive3(TypedDict, total=False):
    """Relational arguments for Channel"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelRecursive4']
    members: Union[bool, 'FindManyChannelMemberArgsFromChannelRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelRecursive4']


class ChannelIncludeFromChannelRecursive4(TypedDict, total=False):
    """Relational arguments for Channel"""

    

class ChannelArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'ChannelIncludeFromChannelRecursive1'


class ChannelArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'ChannelIncludeFromChannelRecursive2'


class ChannelArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'ChannelIncludeFromChannelRecursive3'


class ChannelArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'ChannelIncludeFromChannelRecursive4'


class ChannelArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    
    

class FindManyChannelArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive1'


class FindManyChannelArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive2'


class FindManyChannelArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive3'


class FindManyChannelArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive4'


class FindManyChannelArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    
    

class MessageIncludeFromChannel(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive1']
    channel: Union[bool, 'ChannelArgsFromChannelRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelRecursive1']


class MessageIncludeFromChannelRecursive1(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive2']
    channel: Union[bool, 'ChannelArgsFromChannelRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelRecursive2']


class MessageIncludeFromChannelRecursive2(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive3']
    channel: Union[bool, 'ChannelArgsFromChannelRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelRecursive3']


class MessageIncludeFromChannelRecursive3(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive4']
    channel: Union[bool, 'ChannelArgsFromChannelRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelRecursive4']


class MessageIncludeFromChannelRecursive4(TypedDict, total=False):
    """Relational arguments for Channel"""

    

class MessageArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    
    

class FindManyMessageArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class ChannelMemberIncludeFromChannel(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive1']
    channel: Union[bool, 'ChannelArgsFromChannelRecursive1']


class ChannelMemberIncludeFromChannelRecursive1(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive2']
    channel: Union[bool, 'ChannelArgsFromChannelRecursive2']


class ChannelMemberIncludeFromChannelRecursive2(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive3']
    channel: Union[bool, 'ChannelArgsFromChannelRecursive3']


class ChannelMemberIncludeFromChannelRecursive3(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive4']
    channel: Union[bool, 'ChannelArgsFromChannelRecursive4']


class ChannelMemberIncludeFromChannelRecursive4(TypedDict, total=False):
    """Relational arguments for Channel"""

    

class ChannelMemberArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class ChannelMemberArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class ChannelMemberArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class ChannelMemberArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class ChannelMemberArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    
    

class FindManyChannelMemberArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class FindManyChannelMemberArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class FindManyChannelMemberArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class FindManyChannelMemberArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class FindManyChannelMemberArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    
    

class MentionIncludeFromChannel(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive1']
    message: Union[bool, 'MessageArgsFromChannelRecursive1']


class MentionIncludeFromChannelRecursive1(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive2']
    message: Union[bool, 'MessageArgsFromChannelRecursive2']


class MentionIncludeFromChannelRecursive2(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive3']
    message: Union[bool, 'MessageArgsFromChannelRecursive3']


class MentionIncludeFromChannelRecursive3(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive4']
    message: Union[bool, 'MessageArgsFromChannelRecursive4']


class MentionIncludeFromChannelRecursive4(TypedDict, total=False):
    """Relational arguments for Channel"""

    

class MentionArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'MentionIncludeFromMentionRecursive1'


class MentionArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'MentionIncludeFromMentionRecursive2'


class MentionArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'MentionIncludeFromMentionRecursive3'


class MentionArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'MentionIncludeFromMentionRecursive4'


class MentionArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    
    

class FindManyMentionArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive1'


class FindManyMentionArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive2'


class FindManyMentionArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive3'


class FindManyMentionArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive4'


class FindManyMentionArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    
    

class MessageReactionIncludeFromChannel(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive1']
    message: Union[bool, 'MessageArgsFromChannelRecursive1']


class MessageReactionIncludeFromChannelRecursive1(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive2']
    message: Union[bool, 'MessageArgsFromChannelRecursive2']


class MessageReactionIncludeFromChannelRecursive2(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive3']
    message: Union[bool, 'MessageArgsFromChannelRecursive3']


class MessageReactionIncludeFromChannelRecursive3(TypedDict, total=False):
    """Relational arguments for Channel"""
    user: Union[bool, 'UserArgsFromChannelRecursive4']
    message: Union[bool, 'MessageArgsFromChannelRecursive4']


class MessageReactionIncludeFromChannelRecursive4(TypedDict, total=False):
    """Relational arguments for Channel"""

    

class MessageReactionArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class MessageReactionArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class MessageReactionArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class MessageReactionArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class MessageReactionArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    
    

class FindManyMessageReactionArgsFromChannel(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class FindManyMessageReactionArgsFromChannelRecursive1(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class FindManyMessageReactionArgsFromChannelRecursive2(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class FindManyMessageReactionArgsFromChannelRecursive3(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class FindManyMessageReactionArgsFromChannelRecursive4(TypedDict, total=False):
    """Arguments for Channel"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    


FindManyChannelArgs = FindManyChannelArgsFromChannel
FindFirstChannelArgs = FindManyChannelArgsFromChannel


    

class ChannelWhereInput(TypedDict, total=False):
    """Channel arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'MessageListRelationFilter'
    members: 'ChannelMemberListRelationFilter'
    roles: 'UserRoleListRelationFilter'

    # should be noted that AND and NOT should be Union['ChannelWhereInputRecursive1', List['ChannelWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ChannelWhereInputRecursive1']
    OR: List['ChannelWhereInputRecursive1']
    NOT: List['ChannelWhereInputRecursive1']


class ChannelWhereInputRecursive1(TypedDict, total=False):
    """Channel arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'MessageListRelationFilter'
    members: 'ChannelMemberListRelationFilter'
    roles: 'UserRoleListRelationFilter'

    # should be noted that AND and NOT should be Union['ChannelWhereInputRecursive2', List['ChannelWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ChannelWhereInputRecursive2']
    OR: List['ChannelWhereInputRecursive2']
    NOT: List['ChannelWhereInputRecursive2']


class ChannelWhereInputRecursive2(TypedDict, total=False):
    """Channel arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'MessageListRelationFilter'
    members: 'ChannelMemberListRelationFilter'
    roles: 'UserRoleListRelationFilter'

    # should be noted that AND and NOT should be Union['ChannelWhereInputRecursive3', List['ChannelWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ChannelWhereInputRecursive3']
    OR: List['ChannelWhereInputRecursive3']
    NOT: List['ChannelWhereInputRecursive3']


class ChannelWhereInputRecursive3(TypedDict, total=False):
    """Channel arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'MessageListRelationFilter'
    members: 'ChannelMemberListRelationFilter'
    roles: 'UserRoleListRelationFilter'

    # should be noted that AND and NOT should be Union['ChannelWhereInputRecursive4', List['ChannelWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ChannelWhereInputRecursive4']
    OR: List['ChannelWhereInputRecursive4']
    NOT: List['ChannelWhereInputRecursive4']


class ChannelWhereInputRecursive4(TypedDict, total=False):
    """Channel arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    messages: 'MessageListRelationFilter'
    members: 'ChannelMemberListRelationFilter'
    roles: 'UserRoleListRelationFilter'



# aggregate Channel types


    

class ChannelScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Channel arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChannelScalarWhereWithAggregatesInputRecursive1']
    OR: List['ChannelScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ChannelScalarWhereWithAggregatesInputRecursive1']


class ChannelScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Channel arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChannelScalarWhereWithAggregatesInputRecursive2']
    OR: List['ChannelScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ChannelScalarWhereWithAggregatesInputRecursive2']


class ChannelScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Channel arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChannelScalarWhereWithAggregatesInputRecursive3']
    OR: List['ChannelScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ChannelScalarWhereWithAggregatesInputRecursive3']


class ChannelScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Channel arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChannelScalarWhereWithAggregatesInputRecursive4']
    OR: List['ChannelScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ChannelScalarWhereWithAggregatesInputRecursive4']


class ChannelScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Channel arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ChannelGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ChannelSumAggregateOutput'
    _avg: 'ChannelAvgAggregateOutput'
    _min: 'ChannelMinAggregateOutput'
    _max: 'ChannelMaxAggregateOutput'
    _count: 'ChannelCountAggregateOutput'


class ChannelAvgAggregateOutput(TypedDict, total=False):
    """Channel output for aggregating averages"""


class ChannelSumAggregateOutput(TypedDict, total=False):
    """Channel output for aggregating sums"""


class ChannelScalarAggregateOutput(TypedDict, total=False):
    """Channel output including scalar fields"""
    id: _str
    name: _str
    description: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


ChannelMinAggregateOutput = ChannelScalarAggregateOutput
ChannelMaxAggregateOutput = ChannelScalarAggregateOutput


class ChannelMaxAggregateInput(TypedDict, total=False):
    """Channel input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    createdAt: bool
    updatedAt: bool


class ChannelMinAggregateInput(TypedDict, total=False):
    """Channel input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    createdAt: bool
    updatedAt: bool


class ChannelNumberAggregateInput(TypedDict, total=False):
    """Channel input for aggregating numbers"""


ChannelAvgAggregateInput = ChannelNumberAggregateInput
ChannelSumAggregateInput = ChannelNumberAggregateInput


ChannelCountAggregateInput = TypedDict(
    'ChannelCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ChannelCountAggregateOutput = TypedDict(
    'ChannelCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ChannelKeys = Literal[
    'id',
    'name',
    'description',
    'createdAt',
    'updatedAt',
    'messages',
    'members',
    'roles',
]
ChannelScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'createdAt',
    'updatedAt',
]
ChannelScalarFieldKeysT = TypeVar('ChannelScalarFieldKeysT', bound=ChannelScalarFieldKeys)

ChannelRelationalFieldKeys = Literal[
        'messages',
        'members',
        'roles',
    ]

# Message types

class MessageOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Message create method"""
    id: _str
    isEdited: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    userId: _str
    channelId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    channel: 'ChannelCreateNestedWithoutRelationsInput'
    mentions: 'MentionCreateManyNestedWithoutRelationsInput'
    reactions: 'MessageReactionCreateManyNestedWithoutRelationsInput'


class MessageCreateInput(MessageOptionalCreateInput):
    """Required arguments to the Message create method"""
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MessageOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Message create method, without relations"""
    id: _str
    isEdited: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    userId: _str
    channelId: _str


class MessageCreateWithoutRelationsInput(MessageOptionalCreateWithoutRelationsInput):
    """Required arguments to the Message create method, without relations"""
    content: _str

class MessageConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MessageCreateWithoutRelationsInput'
    where: 'MessageWhereUniqueInput'

class MessageCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageCreateWithoutRelationsInput'
    connect: 'MessageWhereUniqueInput'
    connect_or_create: 'MessageConnectOrCreateWithoutRelationsInput'


class MessageCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MessageCreateWithoutRelationsInput', List['MessageCreateWithoutRelationsInput']]
    connect: Union['MessageWhereUniqueInput', List['MessageWhereUniqueInput']]
    connect_or_create: Union['MessageConnectOrCreateWithoutRelationsInput', List['MessageConnectOrCreateWithoutRelationsInput']]

_MessageWhereUnique_id_Input = TypedDict(
    '_MessageWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

MessageWhereUniqueInput = _MessageWhereUnique_id_Input


class MessageUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    content: _str
    isEdited: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    channel: 'ChannelUpdateOneWithoutRelationsInput'
    mentions: 'MentionUpdateManyWithoutRelationsInput'
    reactions: 'MessageReactionUpdateManyWithoutRelationsInput'


class MessageUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    content: _str
    isEdited: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MessageUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MessageCreateWithoutRelationsInput']
    connect: List['MessageWhereUniqueInput']
    connect_or_create: List['MessageConnectOrCreateWithoutRelationsInput']
    set: List['MessageWhereUniqueInput']
    disconnect: List['MessageWhereUniqueInput']
    delete: List['MessageWhereUniqueInput']

    # TODO
    # update: List['MessageUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MessageUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MessageScalarWhereInput']
    # upsert: List['MessageUpserteWithWhereUniqueWithoutRelationsInput']


class MessageUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageCreateWithoutRelationsInput'
    connect: 'MessageWhereUniqueInput'
    connect_or_create: 'MessageConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MessageUpdateInput'
    # upsert: 'MessageUpsertWithoutRelationsInput'


class MessageUpsertInput(TypedDict):
    create: 'MessageCreateInput'
    update: 'MessageUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Message_id_OrderByInput = TypedDict(
    '_Message_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Message_content_OrderByInput = TypedDict(
    '_Message_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Message_isEdited_OrderByInput = TypedDict(
    '_Message_isEdited_OrderByInput',
    {
        'isEdited': 'SortOrder',
    },
    total=True
)

_Message_createdAt_OrderByInput = TypedDict(
    '_Message_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Message_updatedAt_OrderByInput = TypedDict(
    '_Message_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Message_userId_OrderByInput = TypedDict(
    '_Message_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Message_channelId_OrderByInput = TypedDict(
    '_Message_channelId_OrderByInput',
    {
        'channelId': 'SortOrder',
    },
    total=True
)

_Message_RelevanceInner = TypedDict(
    '_Message_RelevanceInner',
    {
        'fields': 'List[MessageScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Message_RelevanceOrderByInput = TypedDict(
    '_Message_RelevanceOrderByInput',
    {
        '_relevance': '_Message_RelevanceInner',
    },
    total=True
)

MessageOrderByInput = Union[
    '_Message_id_OrderByInput',
    '_Message_content_OrderByInput',
    '_Message_isEdited_OrderByInput',
    '_Message_createdAt_OrderByInput',
    '_Message_updatedAt_OrderByInput',
    '_Message_userId_OrderByInput',
    '_Message_channelId_OrderByInput',
    '_Message_RelevanceOrderByInput',
]



# recursive Message types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MessageRelationFilter = TypedDict(
    'MessageRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MessageListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MessageInclude(TypedDict, total=False):
    """Message relational arguments"""
    user: Union[bool, 'UserArgsFromMessage']
    channel: Union[bool, 'ChannelArgsFromMessage']
    mentions: Union[bool, 'FindManyMentionArgsFromMessage']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessage']


    

class UserIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageRecursive1']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromMessageRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageRecursive1']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromMessageRecursive1']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromMessageRecursive1']


class UserIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageRecursive2']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromMessageRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageRecursive2']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromMessageRecursive2']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromMessageRecursive2']


class UserIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageRecursive3']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromMessageRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageRecursive3']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromMessageRecursive3']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromMessageRecursive3']


class UserIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageRecursive4']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromMessageRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageRecursive4']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromMessageRecursive4']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromMessageRecursive4']


class UserIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class UserArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyUserArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserRoleIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive1']
    channel: Union[bool, 'ChannelArgsFromMessageRecursive1']
    assigner: Union[bool, 'UserArgsFromMessageRecursive1']


class UserRoleIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive2']
    channel: Union[bool, 'ChannelArgsFromMessageRecursive2']
    assigner: Union[bool, 'UserArgsFromMessageRecursive2']


class UserRoleIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive3']
    channel: Union[bool, 'ChannelArgsFromMessageRecursive3']
    assigner: Union[bool, 'UserArgsFromMessageRecursive3']


class UserRoleIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive4']
    channel: Union[bool, 'ChannelArgsFromMessageRecursive4']
    assigner: Union[bool, 'UserArgsFromMessageRecursive4']


class UserRoleIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class UserRoleArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class UserRoleArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class UserRoleArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class UserRoleArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class UserRoleArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyUserRoleArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class FindManyUserRoleArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class FindManyUserRoleArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class FindManyUserRoleArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class FindManyUserRoleArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    
    

class AdminActionIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    admin: Union[bool, 'UserArgsFromMessageRecursive1']


class AdminActionIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    admin: Union[bool, 'UserArgsFromMessageRecursive2']


class AdminActionIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    admin: Union[bool, 'UserArgsFromMessageRecursive3']


class AdminActionIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    admin: Union[bool, 'UserArgsFromMessageRecursive4']


class AdminActionIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class AdminActionArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class AdminActionArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class AdminActionArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class AdminActionArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class AdminActionArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyAdminActionArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class FindManyAdminActionArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class FindManyAdminActionArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class FindManyAdminActionArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class FindManyAdminActionArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    
    

class ChannelIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageRecursive1']
    members: Union[bool, 'FindManyChannelMemberArgsFromMessageRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageRecursive1']


class ChannelIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageRecursive2']
    members: Union[bool, 'FindManyChannelMemberArgsFromMessageRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageRecursive2']


class ChannelIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageRecursive3']
    members: Union[bool, 'FindManyChannelMemberArgsFromMessageRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageRecursive3']


class ChannelIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageRecursive4']
    members: Union[bool, 'FindManyChannelMemberArgsFromMessageRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageRecursive4']


class ChannelIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class ChannelArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ChannelIncludeFromChannelRecursive1'


class ChannelArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ChannelIncludeFromChannelRecursive2'


class ChannelArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ChannelIncludeFromChannelRecursive3'


class ChannelArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ChannelIncludeFromChannelRecursive4'


class ChannelArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyChannelArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive1'


class FindManyChannelArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive2'


class FindManyChannelArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive3'


class FindManyChannelArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive4'


class FindManyChannelArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    
    

class MessageIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive1']
    channel: Union[bool, 'ChannelArgsFromMessageRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageRecursive1']


class MessageIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive2']
    channel: Union[bool, 'ChannelArgsFromMessageRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageRecursive2']


class MessageIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive3']
    channel: Union[bool, 'ChannelArgsFromMessageRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageRecursive3']


class MessageIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive4']
    channel: Union[bool, 'ChannelArgsFromMessageRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageRecursive4']


class MessageIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class MessageArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyMessageArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class ChannelMemberIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive1']
    channel: Union[bool, 'ChannelArgsFromMessageRecursive1']


class ChannelMemberIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive2']
    channel: Union[bool, 'ChannelArgsFromMessageRecursive2']


class ChannelMemberIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive3']
    channel: Union[bool, 'ChannelArgsFromMessageRecursive3']


class ChannelMemberIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive4']
    channel: Union[bool, 'ChannelArgsFromMessageRecursive4']


class ChannelMemberIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class ChannelMemberArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class ChannelMemberArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class ChannelMemberArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class ChannelMemberArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class ChannelMemberArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyChannelMemberArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class FindManyChannelMemberArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class FindManyChannelMemberArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class FindManyChannelMemberArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class FindManyChannelMemberArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    
    

class MentionIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive1']
    message: Union[bool, 'MessageArgsFromMessageRecursive1']


class MentionIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive2']
    message: Union[bool, 'MessageArgsFromMessageRecursive2']


class MentionIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive3']
    message: Union[bool, 'MessageArgsFromMessageRecursive3']


class MentionIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive4']
    message: Union[bool, 'MessageArgsFromMessageRecursive4']


class MentionIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class MentionArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MentionIncludeFromMentionRecursive1'


class MentionArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MentionIncludeFromMentionRecursive2'


class MentionArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MentionIncludeFromMentionRecursive3'


class MentionArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MentionIncludeFromMentionRecursive4'


class MentionArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyMentionArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive1'


class FindManyMentionArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive2'


class FindManyMentionArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive3'


class FindManyMentionArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive4'


class FindManyMentionArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    
    

class MessageReactionIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive1']
    message: Union[bool, 'MessageArgsFromMessageRecursive1']


class MessageReactionIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive2']
    message: Union[bool, 'MessageArgsFromMessageRecursive2']


class MessageReactionIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive3']
    message: Union[bool, 'MessageArgsFromMessageRecursive3']


class MessageReactionIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive4']
    message: Union[bool, 'MessageArgsFromMessageRecursive4']


class MessageReactionIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class MessageReactionArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class MessageReactionArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class MessageReactionArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class MessageReactionArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class MessageReactionArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyMessageReactionArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class FindManyMessageReactionArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class FindManyMessageReactionArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class FindManyMessageReactionArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class FindManyMessageReactionArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    


FindManyMessageArgs = FindManyMessageArgsFromMessage
FindFirstMessageArgs = FindManyMessageArgsFromMessage


    

class MessageWhereInput(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    isEdited: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    channelId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'
    mentions: 'MentionListRelationFilter'
    reactions: 'MessageReactionListRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive1', List['MessageWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive1']
    OR: List['MessageWhereInputRecursive1']
    NOT: List['MessageWhereInputRecursive1']


class MessageWhereInputRecursive1(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    isEdited: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    channelId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'
    mentions: 'MentionListRelationFilter'
    reactions: 'MessageReactionListRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive2', List['MessageWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive2']
    OR: List['MessageWhereInputRecursive2']
    NOT: List['MessageWhereInputRecursive2']


class MessageWhereInputRecursive2(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    isEdited: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    channelId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'
    mentions: 'MentionListRelationFilter'
    reactions: 'MessageReactionListRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive3', List['MessageWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive3']
    OR: List['MessageWhereInputRecursive3']
    NOT: List['MessageWhereInputRecursive3']


class MessageWhereInputRecursive3(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    isEdited: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    channelId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'
    mentions: 'MentionListRelationFilter'
    reactions: 'MessageReactionListRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive4', List['MessageWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive4']
    OR: List['MessageWhereInputRecursive4']
    NOT: List['MessageWhereInputRecursive4']


class MessageWhereInputRecursive4(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    isEdited: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    channelId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'
    mentions: 'MentionListRelationFilter'
    reactions: 'MessageReactionListRelationFilter'



# aggregate Message types


    

class MessageScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    isEdited: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    channelId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive1']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive1']


class MessageScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    isEdited: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    channelId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive2']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive2']


class MessageScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    isEdited: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    channelId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive3']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive3']


class MessageScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    isEdited: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    channelId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive4']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive4']


class MessageScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    isEdited: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    channelId: Union[_str, 'types.StringWithAggregatesFilter']



class MessageGroupByOutput(TypedDict, total=False):
    id: _str
    content: _str
    isEdited: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    userId: _str
    channelId: _str
    _sum: 'MessageSumAggregateOutput'
    _avg: 'MessageAvgAggregateOutput'
    _min: 'MessageMinAggregateOutput'
    _max: 'MessageMaxAggregateOutput'
    _count: 'MessageCountAggregateOutput'


class MessageAvgAggregateOutput(TypedDict, total=False):
    """Message output for aggregating averages"""


class MessageSumAggregateOutput(TypedDict, total=False):
    """Message output for aggregating sums"""


class MessageScalarAggregateOutput(TypedDict, total=False):
    """Message output including scalar fields"""
    id: _str
    content: _str
    isEdited: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    userId: _str
    channelId: _str


MessageMinAggregateOutput = MessageScalarAggregateOutput
MessageMaxAggregateOutput = MessageScalarAggregateOutput


class MessageMaxAggregateInput(TypedDict, total=False):
    """Message input for aggregating by max"""
    id: bool
    content: bool
    isEdited: bool
    createdAt: bool
    updatedAt: bool
    userId: bool
    channelId: bool


class MessageMinAggregateInput(TypedDict, total=False):
    """Message input for aggregating by min"""
    id: bool
    content: bool
    isEdited: bool
    createdAt: bool
    updatedAt: bool
    userId: bool
    channelId: bool


class MessageNumberAggregateInput(TypedDict, total=False):
    """Message input for aggregating numbers"""


MessageAvgAggregateInput = MessageNumberAggregateInput
MessageSumAggregateInput = MessageNumberAggregateInput


MessageCountAggregateInput = TypedDict(
    'MessageCountAggregateInput',
    {
        'id': bool,
        'content': bool,
        'isEdited': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'userId': bool,
        'channelId': bool,
        '_all': bool,
    },
    total=False,
)

MessageCountAggregateOutput = TypedDict(
    'MessageCountAggregateOutput',
    {
        'id': int,
        'content': int,
        'isEdited': int,
        'createdAt': int,
        'updatedAt': int,
        'userId': int,
        'channelId': int,
        '_all': int,
    },
    total=False,
)


MessageKeys = Literal[
    'id',
    'content',
    'isEdited',
    'createdAt',
    'updatedAt',
    'userId',
    'channelId',
    'user',
    'channel',
    'mentions',
    'reactions',
]
MessageScalarFieldKeys = Literal[
    'id',
    'content',
    'isEdited',
    'createdAt',
    'updatedAt',
    'userId',
    'channelId',
]
MessageScalarFieldKeysT = TypeVar('MessageScalarFieldKeysT', bound=MessageScalarFieldKeys)

MessageRelationalFieldKeys = Literal[
        'user',
        'channel',
        'mentions',
        'reactions',
    ]

# ChannelMember types

class ChannelMemberOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ChannelMember create method"""
    id: _str
    joinedAt: datetime.datetime
    userId: _str
    channelId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    channel: 'ChannelCreateNestedWithoutRelationsInput'


class ChannelMemberCreateInput(ChannelMemberOptionalCreateInput):
    """Required arguments to the ChannelMember create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ChannelMemberOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ChannelMember create method, without relations"""
    id: _str
    joinedAt: datetime.datetime
    userId: _str
    channelId: _str


class ChannelMemberCreateWithoutRelationsInput(ChannelMemberOptionalCreateWithoutRelationsInput):
    """Required arguments to the ChannelMember create method, without relations"""

class ChannelMemberConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ChannelMemberCreateWithoutRelationsInput'
    where: 'ChannelMemberWhereUniqueInput'

class ChannelMemberCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ChannelMemberCreateWithoutRelationsInput'
    connect: 'ChannelMemberWhereUniqueInput'
    connect_or_create: 'ChannelMemberConnectOrCreateWithoutRelationsInput'


class ChannelMemberCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ChannelMemberCreateWithoutRelationsInput', List['ChannelMemberCreateWithoutRelationsInput']]
    connect: Union['ChannelMemberWhereUniqueInput', List['ChannelMemberWhereUniqueInput']]
    connect_or_create: Union['ChannelMemberConnectOrCreateWithoutRelationsInput', List['ChannelMemberConnectOrCreateWithoutRelationsInput']]

_ChannelMemberWhereUnique_id_Input = TypedDict(
    '_ChannelMemberWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_ChannelMemberCompounduserId_channelIdKeyInner = TypedDict(
    '_ChannelMemberCompounduserId_channelIdKeyInner',
    {
        'userId': '_str',
        'channelId': '_str',
    },
    total=True
)

_ChannelMemberCompounduserId_channelIdKey = TypedDict(
    '_ChannelMemberCompounduserId_channelIdKey',
    {
        'userId_channelId': '_ChannelMemberCompounduserId_channelIdKeyInner',
    },
    total=True
)

ChannelMemberWhereUniqueInput = Union[
    '_ChannelMemberWhereUnique_id_Input',
    '_ChannelMemberCompounduserId_channelIdKey',
]


class ChannelMemberUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    joinedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    channel: 'ChannelUpdateOneWithoutRelationsInput'


class ChannelMemberUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    joinedAt: datetime.datetime


class ChannelMemberUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ChannelMemberCreateWithoutRelationsInput']
    connect: List['ChannelMemberWhereUniqueInput']
    connect_or_create: List['ChannelMemberConnectOrCreateWithoutRelationsInput']
    set: List['ChannelMemberWhereUniqueInput']
    disconnect: List['ChannelMemberWhereUniqueInput']
    delete: List['ChannelMemberWhereUniqueInput']

    # TODO
    # update: List['ChannelMemberUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ChannelMemberUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ChannelMemberScalarWhereInput']
    # upsert: List['ChannelMemberUpserteWithWhereUniqueWithoutRelationsInput']


class ChannelMemberUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ChannelMemberCreateWithoutRelationsInput'
    connect: 'ChannelMemberWhereUniqueInput'
    connect_or_create: 'ChannelMemberConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ChannelMemberUpdateInput'
    # upsert: 'ChannelMemberUpsertWithoutRelationsInput'


class ChannelMemberUpsertInput(TypedDict):
    create: 'ChannelMemberCreateInput'
    update: 'ChannelMemberUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ChannelMember_id_OrderByInput = TypedDict(
    '_ChannelMember_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ChannelMember_joinedAt_OrderByInput = TypedDict(
    '_ChannelMember_joinedAt_OrderByInput',
    {
        'joinedAt': 'SortOrder',
    },
    total=True
)

_ChannelMember_userId_OrderByInput = TypedDict(
    '_ChannelMember_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_ChannelMember_channelId_OrderByInput = TypedDict(
    '_ChannelMember_channelId_OrderByInput',
    {
        'channelId': 'SortOrder',
    },
    total=True
)

_ChannelMember_RelevanceInner = TypedDict(
    '_ChannelMember_RelevanceInner',
    {
        'fields': 'List[ChannelMemberScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ChannelMember_RelevanceOrderByInput = TypedDict(
    '_ChannelMember_RelevanceOrderByInput',
    {
        '_relevance': '_ChannelMember_RelevanceInner',
    },
    total=True
)

ChannelMemberOrderByInput = Union[
    '_ChannelMember_id_OrderByInput',
    '_ChannelMember_joinedAt_OrderByInput',
    '_ChannelMember_userId_OrderByInput',
    '_ChannelMember_channelId_OrderByInput',
    '_ChannelMember_RelevanceOrderByInput',
]



# recursive ChannelMember types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ChannelMemberRelationFilter = TypedDict(
    'ChannelMemberRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ChannelMemberListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ChannelMemberInclude(TypedDict, total=False):
    """ChannelMember relational arguments"""
    user: Union[bool, 'UserArgsFromChannelMember']
    channel: Union[bool, 'ChannelArgsFromChannelMember']


    

class UserIncludeFromChannelMember(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelMemberRecursive1']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromChannelMemberRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelMemberRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelMemberRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelMemberRecursive1']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromChannelMemberRecursive1']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromChannelMemberRecursive1']


class UserIncludeFromChannelMemberRecursive1(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelMemberRecursive2']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromChannelMemberRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelMemberRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelMemberRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelMemberRecursive2']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromChannelMemberRecursive2']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromChannelMemberRecursive2']


class UserIncludeFromChannelMemberRecursive2(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelMemberRecursive3']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromChannelMemberRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelMemberRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelMemberRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelMemberRecursive3']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromChannelMemberRecursive3']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromChannelMemberRecursive3']


class UserIncludeFromChannelMemberRecursive3(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelMemberRecursive4']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromChannelMemberRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelMemberRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelMemberRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelMemberRecursive4']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromChannelMemberRecursive4']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromChannelMemberRecursive4']


class UserIncludeFromChannelMemberRecursive4(TypedDict, total=False):
    """Relational arguments for ChannelMember"""

    

class UserArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    
    

class FindManyUserArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserRoleIncludeFromChannelMember(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive1']
    channel: Union[bool, 'ChannelArgsFromChannelMemberRecursive1']
    assigner: Union[bool, 'UserArgsFromChannelMemberRecursive1']


class UserRoleIncludeFromChannelMemberRecursive1(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive2']
    channel: Union[bool, 'ChannelArgsFromChannelMemberRecursive2']
    assigner: Union[bool, 'UserArgsFromChannelMemberRecursive2']


class UserRoleIncludeFromChannelMemberRecursive2(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive3']
    channel: Union[bool, 'ChannelArgsFromChannelMemberRecursive3']
    assigner: Union[bool, 'UserArgsFromChannelMemberRecursive3']


class UserRoleIncludeFromChannelMemberRecursive3(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive4']
    channel: Union[bool, 'ChannelArgsFromChannelMemberRecursive4']
    assigner: Union[bool, 'UserArgsFromChannelMemberRecursive4']


class UserRoleIncludeFromChannelMemberRecursive4(TypedDict, total=False):
    """Relational arguments for ChannelMember"""

    

class UserRoleArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class UserRoleArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class UserRoleArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class UserRoleArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class UserRoleArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    
    

class FindManyUserRoleArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class FindManyUserRoleArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class FindManyUserRoleArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class FindManyUserRoleArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class FindManyUserRoleArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    
    

class AdminActionIncludeFromChannelMember(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    admin: Union[bool, 'UserArgsFromChannelMemberRecursive1']


class AdminActionIncludeFromChannelMemberRecursive1(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    admin: Union[bool, 'UserArgsFromChannelMemberRecursive2']


class AdminActionIncludeFromChannelMemberRecursive2(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    admin: Union[bool, 'UserArgsFromChannelMemberRecursive3']


class AdminActionIncludeFromChannelMemberRecursive3(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    admin: Union[bool, 'UserArgsFromChannelMemberRecursive4']


class AdminActionIncludeFromChannelMemberRecursive4(TypedDict, total=False):
    """Relational arguments for ChannelMember"""

    

class AdminActionArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class AdminActionArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class AdminActionArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class AdminActionArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class AdminActionArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    
    

class FindManyAdminActionArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class FindManyAdminActionArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class FindManyAdminActionArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class FindManyAdminActionArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class FindManyAdminActionArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    
    

class ChannelIncludeFromChannelMember(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelMemberRecursive1']
    members: Union[bool, 'FindManyChannelMemberArgsFromChannelMemberRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelMemberRecursive1']


class ChannelIncludeFromChannelMemberRecursive1(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelMemberRecursive2']
    members: Union[bool, 'FindManyChannelMemberArgsFromChannelMemberRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelMemberRecursive2']


class ChannelIncludeFromChannelMemberRecursive2(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelMemberRecursive3']
    members: Union[bool, 'FindManyChannelMemberArgsFromChannelMemberRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelMemberRecursive3']


class ChannelIncludeFromChannelMemberRecursive3(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    messages: Union[bool, 'FindManyMessageArgsFromChannelMemberRecursive4']
    members: Union[bool, 'FindManyChannelMemberArgsFromChannelMemberRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromChannelMemberRecursive4']


class ChannelIncludeFromChannelMemberRecursive4(TypedDict, total=False):
    """Relational arguments for ChannelMember"""

    

class ChannelArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'ChannelIncludeFromChannelRecursive1'


class ChannelArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'ChannelIncludeFromChannelRecursive2'


class ChannelArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'ChannelIncludeFromChannelRecursive3'


class ChannelArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'ChannelIncludeFromChannelRecursive4'


class ChannelArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    
    

class FindManyChannelArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive1'


class FindManyChannelArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive2'


class FindManyChannelArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive3'


class FindManyChannelArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive4'


class FindManyChannelArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    
    

class MessageIncludeFromChannelMember(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive1']
    channel: Union[bool, 'ChannelArgsFromChannelMemberRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelMemberRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelMemberRecursive1']


class MessageIncludeFromChannelMemberRecursive1(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive2']
    channel: Union[bool, 'ChannelArgsFromChannelMemberRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelMemberRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelMemberRecursive2']


class MessageIncludeFromChannelMemberRecursive2(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive3']
    channel: Union[bool, 'ChannelArgsFromChannelMemberRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelMemberRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelMemberRecursive3']


class MessageIncludeFromChannelMemberRecursive3(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive4']
    channel: Union[bool, 'ChannelArgsFromChannelMemberRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromChannelMemberRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromChannelMemberRecursive4']


class MessageIncludeFromChannelMemberRecursive4(TypedDict, total=False):
    """Relational arguments for ChannelMember"""

    

class MessageArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    
    

class FindManyMessageArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class ChannelMemberIncludeFromChannelMember(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive1']
    channel: Union[bool, 'ChannelArgsFromChannelMemberRecursive1']


class ChannelMemberIncludeFromChannelMemberRecursive1(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive2']
    channel: Union[bool, 'ChannelArgsFromChannelMemberRecursive2']


class ChannelMemberIncludeFromChannelMemberRecursive2(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive3']
    channel: Union[bool, 'ChannelArgsFromChannelMemberRecursive3']


class ChannelMemberIncludeFromChannelMemberRecursive3(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive4']
    channel: Union[bool, 'ChannelArgsFromChannelMemberRecursive4']


class ChannelMemberIncludeFromChannelMemberRecursive4(TypedDict, total=False):
    """Relational arguments for ChannelMember"""

    

class ChannelMemberArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class ChannelMemberArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class ChannelMemberArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class ChannelMemberArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class ChannelMemberArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    
    

class FindManyChannelMemberArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class FindManyChannelMemberArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class FindManyChannelMemberArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class FindManyChannelMemberArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class FindManyChannelMemberArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    
    

class MentionIncludeFromChannelMember(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive1']
    message: Union[bool, 'MessageArgsFromChannelMemberRecursive1']


class MentionIncludeFromChannelMemberRecursive1(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive2']
    message: Union[bool, 'MessageArgsFromChannelMemberRecursive2']


class MentionIncludeFromChannelMemberRecursive2(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive3']
    message: Union[bool, 'MessageArgsFromChannelMemberRecursive3']


class MentionIncludeFromChannelMemberRecursive3(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive4']
    message: Union[bool, 'MessageArgsFromChannelMemberRecursive4']


class MentionIncludeFromChannelMemberRecursive4(TypedDict, total=False):
    """Relational arguments for ChannelMember"""

    

class MentionArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'MentionIncludeFromMentionRecursive1'


class MentionArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'MentionIncludeFromMentionRecursive2'


class MentionArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'MentionIncludeFromMentionRecursive3'


class MentionArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'MentionIncludeFromMentionRecursive4'


class MentionArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    
    

class FindManyMentionArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive1'


class FindManyMentionArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive2'


class FindManyMentionArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive3'


class FindManyMentionArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive4'


class FindManyMentionArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    
    

class MessageReactionIncludeFromChannelMember(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive1']
    message: Union[bool, 'MessageArgsFromChannelMemberRecursive1']


class MessageReactionIncludeFromChannelMemberRecursive1(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive2']
    message: Union[bool, 'MessageArgsFromChannelMemberRecursive2']


class MessageReactionIncludeFromChannelMemberRecursive2(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive3']
    message: Union[bool, 'MessageArgsFromChannelMemberRecursive3']


class MessageReactionIncludeFromChannelMemberRecursive3(TypedDict, total=False):
    """Relational arguments for ChannelMember"""
    user: Union[bool, 'UserArgsFromChannelMemberRecursive4']
    message: Union[bool, 'MessageArgsFromChannelMemberRecursive4']


class MessageReactionIncludeFromChannelMemberRecursive4(TypedDict, total=False):
    """Relational arguments for ChannelMember"""

    

class MessageReactionArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class MessageReactionArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class MessageReactionArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class MessageReactionArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class MessageReactionArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    
    

class FindManyMessageReactionArgsFromChannelMember(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class FindManyMessageReactionArgsFromChannelMemberRecursive1(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class FindManyMessageReactionArgsFromChannelMemberRecursive2(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class FindManyMessageReactionArgsFromChannelMemberRecursive3(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class FindManyMessageReactionArgsFromChannelMemberRecursive4(TypedDict, total=False):
    """Arguments for ChannelMember"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    


FindManyChannelMemberArgs = FindManyChannelMemberArgsFromChannelMember
FindFirstChannelMemberArgs = FindManyChannelMemberArgsFromChannelMember


    

class ChannelMemberWhereInput(TypedDict, total=False):
    """ChannelMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    channelId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'

    # should be noted that AND and NOT should be Union['ChannelMemberWhereInputRecursive1', List['ChannelMemberWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ChannelMemberWhereInputRecursive1']
    OR: List['ChannelMemberWhereInputRecursive1']
    NOT: List['ChannelMemberWhereInputRecursive1']


class ChannelMemberWhereInputRecursive1(TypedDict, total=False):
    """ChannelMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    channelId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'

    # should be noted that AND and NOT should be Union['ChannelMemberWhereInputRecursive2', List['ChannelMemberWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ChannelMemberWhereInputRecursive2']
    OR: List['ChannelMemberWhereInputRecursive2']
    NOT: List['ChannelMemberWhereInputRecursive2']


class ChannelMemberWhereInputRecursive2(TypedDict, total=False):
    """ChannelMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    channelId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'

    # should be noted that AND and NOT should be Union['ChannelMemberWhereInputRecursive3', List['ChannelMemberWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ChannelMemberWhereInputRecursive3']
    OR: List['ChannelMemberWhereInputRecursive3']
    NOT: List['ChannelMemberWhereInputRecursive3']


class ChannelMemberWhereInputRecursive3(TypedDict, total=False):
    """ChannelMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    channelId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'

    # should be noted that AND and NOT should be Union['ChannelMemberWhereInputRecursive4', List['ChannelMemberWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ChannelMemberWhereInputRecursive4']
    OR: List['ChannelMemberWhereInputRecursive4']
    NOT: List['ChannelMemberWhereInputRecursive4']


class ChannelMemberWhereInputRecursive4(TypedDict, total=False):
    """ChannelMember arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    channelId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    channel: 'ChannelRelationFilter'



# aggregate ChannelMember types


    

class ChannelMemberScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ChannelMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    channelId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ChannelMemberScalarWhereWithAggregatesInputRecursive1']
    OR: List['ChannelMemberScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ChannelMemberScalarWhereWithAggregatesInputRecursive1']


class ChannelMemberScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ChannelMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    channelId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ChannelMemberScalarWhereWithAggregatesInputRecursive2']
    OR: List['ChannelMemberScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ChannelMemberScalarWhereWithAggregatesInputRecursive2']


class ChannelMemberScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ChannelMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    channelId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ChannelMemberScalarWhereWithAggregatesInputRecursive3']
    OR: List['ChannelMemberScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ChannelMemberScalarWhereWithAggregatesInputRecursive3']


class ChannelMemberScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ChannelMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    channelId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ChannelMemberScalarWhereWithAggregatesInputRecursive4']
    OR: List['ChannelMemberScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ChannelMemberScalarWhereWithAggregatesInputRecursive4']


class ChannelMemberScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ChannelMember arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    joinedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    channelId: Union[_str, 'types.StringWithAggregatesFilter']



class ChannelMemberGroupByOutput(TypedDict, total=False):
    id: _str
    joinedAt: datetime.datetime
    userId: _str
    channelId: _str
    _sum: 'ChannelMemberSumAggregateOutput'
    _avg: 'ChannelMemberAvgAggregateOutput'
    _min: 'ChannelMemberMinAggregateOutput'
    _max: 'ChannelMemberMaxAggregateOutput'
    _count: 'ChannelMemberCountAggregateOutput'


class ChannelMemberAvgAggregateOutput(TypedDict, total=False):
    """ChannelMember output for aggregating averages"""


class ChannelMemberSumAggregateOutput(TypedDict, total=False):
    """ChannelMember output for aggregating sums"""


class ChannelMemberScalarAggregateOutput(TypedDict, total=False):
    """ChannelMember output including scalar fields"""
    id: _str
    joinedAt: datetime.datetime
    userId: _str
    channelId: _str


ChannelMemberMinAggregateOutput = ChannelMemberScalarAggregateOutput
ChannelMemberMaxAggregateOutput = ChannelMemberScalarAggregateOutput


class ChannelMemberMaxAggregateInput(TypedDict, total=False):
    """ChannelMember input for aggregating by max"""
    id: bool
    joinedAt: bool
    userId: bool
    channelId: bool


class ChannelMemberMinAggregateInput(TypedDict, total=False):
    """ChannelMember input for aggregating by min"""
    id: bool
    joinedAt: bool
    userId: bool
    channelId: bool


class ChannelMemberNumberAggregateInput(TypedDict, total=False):
    """ChannelMember input for aggregating numbers"""


ChannelMemberAvgAggregateInput = ChannelMemberNumberAggregateInput
ChannelMemberSumAggregateInput = ChannelMemberNumberAggregateInput


ChannelMemberCountAggregateInput = TypedDict(
    'ChannelMemberCountAggregateInput',
    {
        'id': bool,
        'joinedAt': bool,
        'userId': bool,
        'channelId': bool,
        '_all': bool,
    },
    total=False,
)

ChannelMemberCountAggregateOutput = TypedDict(
    'ChannelMemberCountAggregateOutput',
    {
        'id': int,
        'joinedAt': int,
        'userId': int,
        'channelId': int,
        '_all': int,
    },
    total=False,
)


ChannelMemberKeys = Literal[
    'id',
    'joinedAt',
    'userId',
    'channelId',
    'user',
    'channel',
]
ChannelMemberScalarFieldKeys = Literal[
    'id',
    'joinedAt',
    'userId',
    'channelId',
]
ChannelMemberScalarFieldKeysT = TypeVar('ChannelMemberScalarFieldKeysT', bound=ChannelMemberScalarFieldKeys)

ChannelMemberRelationalFieldKeys = Literal[
        'user',
        'channel',
    ]

# Mention types

class MentionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Mention create method"""
    id: _str
    createdAt: datetime.datetime
    userId: _str
    messageId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    message: 'MessageCreateNestedWithoutRelationsInput'


class MentionCreateInput(MentionOptionalCreateInput):
    """Required arguments to the Mention create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MentionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Mention create method, without relations"""
    id: _str
    createdAt: datetime.datetime
    userId: _str
    messageId: _str


class MentionCreateWithoutRelationsInput(MentionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Mention create method, without relations"""

class MentionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MentionCreateWithoutRelationsInput'
    where: 'MentionWhereUniqueInput'

class MentionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MentionCreateWithoutRelationsInput'
    connect: 'MentionWhereUniqueInput'
    connect_or_create: 'MentionConnectOrCreateWithoutRelationsInput'


class MentionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MentionCreateWithoutRelationsInput', List['MentionCreateWithoutRelationsInput']]
    connect: Union['MentionWhereUniqueInput', List['MentionWhereUniqueInput']]
    connect_or_create: Union['MentionConnectOrCreateWithoutRelationsInput', List['MentionConnectOrCreateWithoutRelationsInput']]

_MentionWhereUnique_id_Input = TypedDict(
    '_MentionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_MentionCompounduserId_messageIdKeyInner = TypedDict(
    '_MentionCompounduserId_messageIdKeyInner',
    {
        'userId': '_str',
        'messageId': '_str',
    },
    total=True
)

_MentionCompounduserId_messageIdKey = TypedDict(
    '_MentionCompounduserId_messageIdKey',
    {
        'userId_messageId': '_MentionCompounduserId_messageIdKeyInner',
    },
    total=True
)

MentionWhereUniqueInput = Union[
    '_MentionWhereUnique_id_Input',
    '_MentionCompounduserId_messageIdKey',
]


class MentionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    createdAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    message: 'MessageUpdateOneWithoutRelationsInput'


class MentionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    createdAt: datetime.datetime


class MentionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MentionCreateWithoutRelationsInput']
    connect: List['MentionWhereUniqueInput']
    connect_or_create: List['MentionConnectOrCreateWithoutRelationsInput']
    set: List['MentionWhereUniqueInput']
    disconnect: List['MentionWhereUniqueInput']
    delete: List['MentionWhereUniqueInput']

    # TODO
    # update: List['MentionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MentionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MentionScalarWhereInput']
    # upsert: List['MentionUpserteWithWhereUniqueWithoutRelationsInput']


class MentionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MentionCreateWithoutRelationsInput'
    connect: 'MentionWhereUniqueInput'
    connect_or_create: 'MentionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MentionUpdateInput'
    # upsert: 'MentionUpsertWithoutRelationsInput'


class MentionUpsertInput(TypedDict):
    create: 'MentionCreateInput'
    update: 'MentionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Mention_id_OrderByInput = TypedDict(
    '_Mention_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Mention_createdAt_OrderByInput = TypedDict(
    '_Mention_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Mention_userId_OrderByInput = TypedDict(
    '_Mention_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Mention_messageId_OrderByInput = TypedDict(
    '_Mention_messageId_OrderByInput',
    {
        'messageId': 'SortOrder',
    },
    total=True
)

_Mention_RelevanceInner = TypedDict(
    '_Mention_RelevanceInner',
    {
        'fields': 'List[MentionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Mention_RelevanceOrderByInput = TypedDict(
    '_Mention_RelevanceOrderByInput',
    {
        '_relevance': '_Mention_RelevanceInner',
    },
    total=True
)

MentionOrderByInput = Union[
    '_Mention_id_OrderByInput',
    '_Mention_createdAt_OrderByInput',
    '_Mention_userId_OrderByInput',
    '_Mention_messageId_OrderByInput',
    '_Mention_RelevanceOrderByInput',
]



# recursive Mention types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MentionRelationFilter = TypedDict(
    'MentionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MentionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MentionInclude(TypedDict, total=False):
    """Mention relational arguments"""
    user: Union[bool, 'UserArgsFromMention']
    message: Union[bool, 'MessageArgsFromMention']


    

class UserIncludeFromMention(TypedDict, total=False):
    """Relational arguments for Mention"""
    messages: Union[bool, 'FindManyMessageArgsFromMentionRecursive1']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromMentionRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromMentionRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMentionRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromMentionRecursive1']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromMentionRecursive1']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromMentionRecursive1']


class UserIncludeFromMentionRecursive1(TypedDict, total=False):
    """Relational arguments for Mention"""
    messages: Union[bool, 'FindManyMessageArgsFromMentionRecursive2']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromMentionRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromMentionRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMentionRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromMentionRecursive2']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromMentionRecursive2']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromMentionRecursive2']


class UserIncludeFromMentionRecursive2(TypedDict, total=False):
    """Relational arguments for Mention"""
    messages: Union[bool, 'FindManyMessageArgsFromMentionRecursive3']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromMentionRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromMentionRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMentionRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromMentionRecursive3']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromMentionRecursive3']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromMentionRecursive3']


class UserIncludeFromMentionRecursive3(TypedDict, total=False):
    """Relational arguments for Mention"""
    messages: Union[bool, 'FindManyMessageArgsFromMentionRecursive4']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromMentionRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromMentionRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMentionRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromMentionRecursive4']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromMentionRecursive4']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromMentionRecursive4']


class UserIncludeFromMentionRecursive4(TypedDict, total=False):
    """Relational arguments for Mention"""

    

class UserArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    
    

class FindManyUserArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserRoleIncludeFromMention(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive1']
    channel: Union[bool, 'ChannelArgsFromMentionRecursive1']
    assigner: Union[bool, 'UserArgsFromMentionRecursive1']


class UserRoleIncludeFromMentionRecursive1(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive2']
    channel: Union[bool, 'ChannelArgsFromMentionRecursive2']
    assigner: Union[bool, 'UserArgsFromMentionRecursive2']


class UserRoleIncludeFromMentionRecursive2(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive3']
    channel: Union[bool, 'ChannelArgsFromMentionRecursive3']
    assigner: Union[bool, 'UserArgsFromMentionRecursive3']


class UserRoleIncludeFromMentionRecursive3(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive4']
    channel: Union[bool, 'ChannelArgsFromMentionRecursive4']
    assigner: Union[bool, 'UserArgsFromMentionRecursive4']


class UserRoleIncludeFromMentionRecursive4(TypedDict, total=False):
    """Relational arguments for Mention"""

    

class UserRoleArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class UserRoleArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class UserRoleArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class UserRoleArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class UserRoleArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    
    

class FindManyUserRoleArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class FindManyUserRoleArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class FindManyUserRoleArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class FindManyUserRoleArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class FindManyUserRoleArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    
    

class AdminActionIncludeFromMention(TypedDict, total=False):
    """Relational arguments for Mention"""
    admin: Union[bool, 'UserArgsFromMentionRecursive1']


class AdminActionIncludeFromMentionRecursive1(TypedDict, total=False):
    """Relational arguments for Mention"""
    admin: Union[bool, 'UserArgsFromMentionRecursive2']


class AdminActionIncludeFromMentionRecursive2(TypedDict, total=False):
    """Relational arguments for Mention"""
    admin: Union[bool, 'UserArgsFromMentionRecursive3']


class AdminActionIncludeFromMentionRecursive3(TypedDict, total=False):
    """Relational arguments for Mention"""
    admin: Union[bool, 'UserArgsFromMentionRecursive4']


class AdminActionIncludeFromMentionRecursive4(TypedDict, total=False):
    """Relational arguments for Mention"""

    

class AdminActionArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class AdminActionArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class AdminActionArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class AdminActionArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class AdminActionArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    
    

class FindManyAdminActionArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class FindManyAdminActionArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class FindManyAdminActionArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class FindManyAdminActionArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class FindManyAdminActionArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    
    

class ChannelIncludeFromMention(TypedDict, total=False):
    """Relational arguments for Mention"""
    messages: Union[bool, 'FindManyMessageArgsFromMentionRecursive1']
    members: Union[bool, 'FindManyChannelMemberArgsFromMentionRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromMentionRecursive1']


class ChannelIncludeFromMentionRecursive1(TypedDict, total=False):
    """Relational arguments for Mention"""
    messages: Union[bool, 'FindManyMessageArgsFromMentionRecursive2']
    members: Union[bool, 'FindManyChannelMemberArgsFromMentionRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromMentionRecursive2']


class ChannelIncludeFromMentionRecursive2(TypedDict, total=False):
    """Relational arguments for Mention"""
    messages: Union[bool, 'FindManyMessageArgsFromMentionRecursive3']
    members: Union[bool, 'FindManyChannelMemberArgsFromMentionRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromMentionRecursive3']


class ChannelIncludeFromMentionRecursive3(TypedDict, total=False):
    """Relational arguments for Mention"""
    messages: Union[bool, 'FindManyMessageArgsFromMentionRecursive4']
    members: Union[bool, 'FindManyChannelMemberArgsFromMentionRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromMentionRecursive4']


class ChannelIncludeFromMentionRecursive4(TypedDict, total=False):
    """Relational arguments for Mention"""

    

class ChannelArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'ChannelIncludeFromChannelRecursive1'


class ChannelArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'ChannelIncludeFromChannelRecursive2'


class ChannelArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'ChannelIncludeFromChannelRecursive3'


class ChannelArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'ChannelIncludeFromChannelRecursive4'


class ChannelArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    
    

class FindManyChannelArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive1'


class FindManyChannelArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive2'


class FindManyChannelArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive3'


class FindManyChannelArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive4'


class FindManyChannelArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    
    

class MessageIncludeFromMention(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive1']
    channel: Union[bool, 'ChannelArgsFromMentionRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromMentionRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMentionRecursive1']


class MessageIncludeFromMentionRecursive1(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive2']
    channel: Union[bool, 'ChannelArgsFromMentionRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromMentionRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMentionRecursive2']


class MessageIncludeFromMentionRecursive2(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive3']
    channel: Union[bool, 'ChannelArgsFromMentionRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromMentionRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMentionRecursive3']


class MessageIncludeFromMentionRecursive3(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive4']
    channel: Union[bool, 'ChannelArgsFromMentionRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromMentionRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMentionRecursive4']


class MessageIncludeFromMentionRecursive4(TypedDict, total=False):
    """Relational arguments for Mention"""

    

class MessageArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    
    

class FindManyMessageArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class ChannelMemberIncludeFromMention(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive1']
    channel: Union[bool, 'ChannelArgsFromMentionRecursive1']


class ChannelMemberIncludeFromMentionRecursive1(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive2']
    channel: Union[bool, 'ChannelArgsFromMentionRecursive2']


class ChannelMemberIncludeFromMentionRecursive2(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive3']
    channel: Union[bool, 'ChannelArgsFromMentionRecursive3']


class ChannelMemberIncludeFromMentionRecursive3(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive4']
    channel: Union[bool, 'ChannelArgsFromMentionRecursive4']


class ChannelMemberIncludeFromMentionRecursive4(TypedDict, total=False):
    """Relational arguments for Mention"""

    

class ChannelMemberArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class ChannelMemberArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class ChannelMemberArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class ChannelMemberArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class ChannelMemberArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    
    

class FindManyChannelMemberArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class FindManyChannelMemberArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class FindManyChannelMemberArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class FindManyChannelMemberArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class FindManyChannelMemberArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    
    

class MentionIncludeFromMention(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive1']
    message: Union[bool, 'MessageArgsFromMentionRecursive1']


class MentionIncludeFromMentionRecursive1(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive2']
    message: Union[bool, 'MessageArgsFromMentionRecursive2']


class MentionIncludeFromMentionRecursive2(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive3']
    message: Union[bool, 'MessageArgsFromMentionRecursive3']


class MentionIncludeFromMentionRecursive3(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive4']
    message: Union[bool, 'MessageArgsFromMentionRecursive4']


class MentionIncludeFromMentionRecursive4(TypedDict, total=False):
    """Relational arguments for Mention"""

    

class MentionArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'MentionIncludeFromMentionRecursive1'


class MentionArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'MentionIncludeFromMentionRecursive2'


class MentionArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'MentionIncludeFromMentionRecursive3'


class MentionArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'MentionIncludeFromMentionRecursive4'


class MentionArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    
    

class FindManyMentionArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive1'


class FindManyMentionArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive2'


class FindManyMentionArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive3'


class FindManyMentionArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive4'


class FindManyMentionArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    
    

class MessageReactionIncludeFromMention(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive1']
    message: Union[bool, 'MessageArgsFromMentionRecursive1']


class MessageReactionIncludeFromMentionRecursive1(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive2']
    message: Union[bool, 'MessageArgsFromMentionRecursive2']


class MessageReactionIncludeFromMentionRecursive2(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive3']
    message: Union[bool, 'MessageArgsFromMentionRecursive3']


class MessageReactionIncludeFromMentionRecursive3(TypedDict, total=False):
    """Relational arguments for Mention"""
    user: Union[bool, 'UserArgsFromMentionRecursive4']
    message: Union[bool, 'MessageArgsFromMentionRecursive4']


class MessageReactionIncludeFromMentionRecursive4(TypedDict, total=False):
    """Relational arguments for Mention"""

    

class MessageReactionArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class MessageReactionArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class MessageReactionArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class MessageReactionArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class MessageReactionArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    
    

class FindManyMessageReactionArgsFromMention(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class FindManyMessageReactionArgsFromMentionRecursive1(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class FindManyMessageReactionArgsFromMentionRecursive2(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class FindManyMessageReactionArgsFromMentionRecursive3(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class FindManyMessageReactionArgsFromMentionRecursive4(TypedDict, total=False):
    """Arguments for Mention"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    


FindManyMentionArgs = FindManyMentionArgsFromMention
FindFirstMentionArgs = FindManyMentionArgsFromMention


    

class MentionWhereInput(TypedDict, total=False):
    """Mention arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    messageId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    message: 'MessageRelationFilter'

    # should be noted that AND and NOT should be Union['MentionWhereInputRecursive1', List['MentionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MentionWhereInputRecursive1']
    OR: List['MentionWhereInputRecursive1']
    NOT: List['MentionWhereInputRecursive1']


class MentionWhereInputRecursive1(TypedDict, total=False):
    """Mention arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    messageId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    message: 'MessageRelationFilter'

    # should be noted that AND and NOT should be Union['MentionWhereInputRecursive2', List['MentionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MentionWhereInputRecursive2']
    OR: List['MentionWhereInputRecursive2']
    NOT: List['MentionWhereInputRecursive2']


class MentionWhereInputRecursive2(TypedDict, total=False):
    """Mention arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    messageId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    message: 'MessageRelationFilter'

    # should be noted that AND and NOT should be Union['MentionWhereInputRecursive3', List['MentionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MentionWhereInputRecursive3']
    OR: List['MentionWhereInputRecursive3']
    NOT: List['MentionWhereInputRecursive3']


class MentionWhereInputRecursive3(TypedDict, total=False):
    """Mention arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    messageId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    message: 'MessageRelationFilter'

    # should be noted that AND and NOT should be Union['MentionWhereInputRecursive4', List['MentionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MentionWhereInputRecursive4']
    OR: List['MentionWhereInputRecursive4']
    NOT: List['MentionWhereInputRecursive4']


class MentionWhereInputRecursive4(TypedDict, total=False):
    """Mention arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    messageId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    message: 'MessageRelationFilter'



# aggregate Mention types


    

class MentionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Mention arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MentionScalarWhereWithAggregatesInputRecursive1']
    OR: List['MentionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MentionScalarWhereWithAggregatesInputRecursive1']


class MentionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Mention arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MentionScalarWhereWithAggregatesInputRecursive2']
    OR: List['MentionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MentionScalarWhereWithAggregatesInputRecursive2']


class MentionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Mention arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MentionScalarWhereWithAggregatesInputRecursive3']
    OR: List['MentionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MentionScalarWhereWithAggregatesInputRecursive3']


class MentionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Mention arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MentionScalarWhereWithAggregatesInputRecursive4']
    OR: List['MentionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MentionScalarWhereWithAggregatesInputRecursive4']


class MentionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Mention arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']



class MentionGroupByOutput(TypedDict, total=False):
    id: _str
    createdAt: datetime.datetime
    userId: _str
    messageId: _str
    _sum: 'MentionSumAggregateOutput'
    _avg: 'MentionAvgAggregateOutput'
    _min: 'MentionMinAggregateOutput'
    _max: 'MentionMaxAggregateOutput'
    _count: 'MentionCountAggregateOutput'


class MentionAvgAggregateOutput(TypedDict, total=False):
    """Mention output for aggregating averages"""


class MentionSumAggregateOutput(TypedDict, total=False):
    """Mention output for aggregating sums"""


class MentionScalarAggregateOutput(TypedDict, total=False):
    """Mention output including scalar fields"""
    id: _str
    createdAt: datetime.datetime
    userId: _str
    messageId: _str


MentionMinAggregateOutput = MentionScalarAggregateOutput
MentionMaxAggregateOutput = MentionScalarAggregateOutput


class MentionMaxAggregateInput(TypedDict, total=False):
    """Mention input for aggregating by max"""
    id: bool
    createdAt: bool
    userId: bool
    messageId: bool


class MentionMinAggregateInput(TypedDict, total=False):
    """Mention input for aggregating by min"""
    id: bool
    createdAt: bool
    userId: bool
    messageId: bool


class MentionNumberAggregateInput(TypedDict, total=False):
    """Mention input for aggregating numbers"""


MentionAvgAggregateInput = MentionNumberAggregateInput
MentionSumAggregateInput = MentionNumberAggregateInput


MentionCountAggregateInput = TypedDict(
    'MentionCountAggregateInput',
    {
        'id': bool,
        'createdAt': bool,
        'userId': bool,
        'messageId': bool,
        '_all': bool,
    },
    total=False,
)

MentionCountAggregateOutput = TypedDict(
    'MentionCountAggregateOutput',
    {
        'id': int,
        'createdAt': int,
        'userId': int,
        'messageId': int,
        '_all': int,
    },
    total=False,
)


MentionKeys = Literal[
    'id',
    'createdAt',
    'userId',
    'messageId',
    'user',
    'message',
]
MentionScalarFieldKeys = Literal[
    'id',
    'createdAt',
    'userId',
    'messageId',
]
MentionScalarFieldKeysT = TypeVar('MentionScalarFieldKeysT', bound=MentionScalarFieldKeys)

MentionRelationalFieldKeys = Literal[
        'user',
        'message',
    ]

# MessageReaction types

class MessageReactionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the MessageReaction create method"""
    id: _str
    createdAt: datetime.datetime
    userId: _str
    messageId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    message: 'MessageCreateNestedWithoutRelationsInput'


class MessageReactionCreateInput(MessageReactionOptionalCreateInput):
    """Required arguments to the MessageReaction create method"""
    emoji: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MessageReactionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the MessageReaction create method, without relations"""
    id: _str
    createdAt: datetime.datetime
    userId: _str
    messageId: _str


class MessageReactionCreateWithoutRelationsInput(MessageReactionOptionalCreateWithoutRelationsInput):
    """Required arguments to the MessageReaction create method, without relations"""
    emoji: _str

class MessageReactionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MessageReactionCreateWithoutRelationsInput'
    where: 'MessageReactionWhereUniqueInput'

class MessageReactionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageReactionCreateWithoutRelationsInput'
    connect: 'MessageReactionWhereUniqueInput'
    connect_or_create: 'MessageReactionConnectOrCreateWithoutRelationsInput'


class MessageReactionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MessageReactionCreateWithoutRelationsInput', List['MessageReactionCreateWithoutRelationsInput']]
    connect: Union['MessageReactionWhereUniqueInput', List['MessageReactionWhereUniqueInput']]
    connect_or_create: Union['MessageReactionConnectOrCreateWithoutRelationsInput', List['MessageReactionConnectOrCreateWithoutRelationsInput']]

_MessageReactionWhereUnique_id_Input = TypedDict(
    '_MessageReactionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_MessageReactionCompounduserId_messageId_emojiKeyInner = TypedDict(
    '_MessageReactionCompounduserId_messageId_emojiKeyInner',
    {
        'userId': '_str',
        'messageId': '_str',
        'emoji': '_str',
    },
    total=True
)

_MessageReactionCompounduserId_messageId_emojiKey = TypedDict(
    '_MessageReactionCompounduserId_messageId_emojiKey',
    {
        'userId_messageId_emoji': '_MessageReactionCompounduserId_messageId_emojiKeyInner',
    },
    total=True
)

MessageReactionWhereUniqueInput = Union[
    '_MessageReactionWhereUnique_id_Input',
    '_MessageReactionCompounduserId_messageId_emojiKey',
]


class MessageReactionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    emoji: _str
    createdAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    message: 'MessageUpdateOneWithoutRelationsInput'


class MessageReactionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    emoji: _str
    createdAt: datetime.datetime


class MessageReactionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MessageReactionCreateWithoutRelationsInput']
    connect: List['MessageReactionWhereUniqueInput']
    connect_or_create: List['MessageReactionConnectOrCreateWithoutRelationsInput']
    set: List['MessageReactionWhereUniqueInput']
    disconnect: List['MessageReactionWhereUniqueInput']
    delete: List['MessageReactionWhereUniqueInput']

    # TODO
    # update: List['MessageReactionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MessageReactionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MessageReactionScalarWhereInput']
    # upsert: List['MessageReactionUpserteWithWhereUniqueWithoutRelationsInput']


class MessageReactionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageReactionCreateWithoutRelationsInput'
    connect: 'MessageReactionWhereUniqueInput'
    connect_or_create: 'MessageReactionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MessageReactionUpdateInput'
    # upsert: 'MessageReactionUpsertWithoutRelationsInput'


class MessageReactionUpsertInput(TypedDict):
    create: 'MessageReactionCreateInput'
    update: 'MessageReactionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_MessageReaction_id_OrderByInput = TypedDict(
    '_MessageReaction_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_MessageReaction_emoji_OrderByInput = TypedDict(
    '_MessageReaction_emoji_OrderByInput',
    {
        'emoji': 'SortOrder',
    },
    total=True
)

_MessageReaction_createdAt_OrderByInput = TypedDict(
    '_MessageReaction_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_MessageReaction_userId_OrderByInput = TypedDict(
    '_MessageReaction_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_MessageReaction_messageId_OrderByInput = TypedDict(
    '_MessageReaction_messageId_OrderByInput',
    {
        'messageId': 'SortOrder',
    },
    total=True
)

_MessageReaction_RelevanceInner = TypedDict(
    '_MessageReaction_RelevanceInner',
    {
        'fields': 'List[MessageReactionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_MessageReaction_RelevanceOrderByInput = TypedDict(
    '_MessageReaction_RelevanceOrderByInput',
    {
        '_relevance': '_MessageReaction_RelevanceInner',
    },
    total=True
)

MessageReactionOrderByInput = Union[
    '_MessageReaction_id_OrderByInput',
    '_MessageReaction_emoji_OrderByInput',
    '_MessageReaction_createdAt_OrderByInput',
    '_MessageReaction_userId_OrderByInput',
    '_MessageReaction_messageId_OrderByInput',
    '_MessageReaction_RelevanceOrderByInput',
]



# recursive MessageReaction types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MessageReactionRelationFilter = TypedDict(
    'MessageReactionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MessageReactionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MessageReactionInclude(TypedDict, total=False):
    """MessageReaction relational arguments"""
    user: Union[bool, 'UserArgsFromMessageReaction']
    message: Union[bool, 'MessageArgsFromMessageReaction']


    

class UserIncludeFromMessageReaction(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageReactionRecursive1']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromMessageReactionRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageReactionRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageReactionRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageReactionRecursive1']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromMessageReactionRecursive1']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromMessageReactionRecursive1']


class UserIncludeFromMessageReactionRecursive1(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageReactionRecursive2']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromMessageReactionRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageReactionRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageReactionRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageReactionRecursive2']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromMessageReactionRecursive2']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromMessageReactionRecursive2']


class UserIncludeFromMessageReactionRecursive2(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageReactionRecursive3']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromMessageReactionRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageReactionRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageReactionRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageReactionRecursive3']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromMessageReactionRecursive3']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromMessageReactionRecursive3']


class UserIncludeFromMessageReactionRecursive3(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageReactionRecursive4']
    channelMembers: Union[bool, 'FindManyChannelMemberArgsFromMessageReactionRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageReactionRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageReactionRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageReactionRecursive4']
    adminActions: Union[bool, 'FindManyAdminActionArgsFromMessageReactionRecursive4']
    assignedRoles: Union[bool, 'FindManyUserRoleArgsFromMessageReactionRecursive4']


class UserIncludeFromMessageReactionRecursive4(TypedDict, total=False):
    """Relational arguments for MessageReaction"""

    

class UserArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    
    

class FindManyUserArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserRoleIncludeFromMessageReaction(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive1']
    channel: Union[bool, 'ChannelArgsFromMessageReactionRecursive1']
    assigner: Union[bool, 'UserArgsFromMessageReactionRecursive1']


class UserRoleIncludeFromMessageReactionRecursive1(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive2']
    channel: Union[bool, 'ChannelArgsFromMessageReactionRecursive2']
    assigner: Union[bool, 'UserArgsFromMessageReactionRecursive2']


class UserRoleIncludeFromMessageReactionRecursive2(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive3']
    channel: Union[bool, 'ChannelArgsFromMessageReactionRecursive3']
    assigner: Union[bool, 'UserArgsFromMessageReactionRecursive3']


class UserRoleIncludeFromMessageReactionRecursive3(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive4']
    channel: Union[bool, 'ChannelArgsFromMessageReactionRecursive4']
    assigner: Union[bool, 'UserArgsFromMessageReactionRecursive4']


class UserRoleIncludeFromMessageReactionRecursive4(TypedDict, total=False):
    """Relational arguments for MessageReaction"""

    

class UserRoleArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class UserRoleArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class UserRoleArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class UserRoleArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class UserRoleArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    
    

class FindManyUserRoleArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive1'


class FindManyUserRoleArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive2'


class FindManyUserRoleArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive3'


class FindManyUserRoleArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    include: 'UserRoleIncludeFromUserRoleRecursive4'


class FindManyUserRoleArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['UserRoleOrderByInput', List['UserRoleOrderByInput']]
    where: 'UserRoleWhereInput'
    cursor: 'UserRoleWhereUniqueInput'
    distinct: List['UserRoleScalarFieldKeys']
    
    

class AdminActionIncludeFromMessageReaction(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    admin: Union[bool, 'UserArgsFromMessageReactionRecursive1']


class AdminActionIncludeFromMessageReactionRecursive1(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    admin: Union[bool, 'UserArgsFromMessageReactionRecursive2']


class AdminActionIncludeFromMessageReactionRecursive2(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    admin: Union[bool, 'UserArgsFromMessageReactionRecursive3']


class AdminActionIncludeFromMessageReactionRecursive3(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    admin: Union[bool, 'UserArgsFromMessageReactionRecursive4']


class AdminActionIncludeFromMessageReactionRecursive4(TypedDict, total=False):
    """Relational arguments for MessageReaction"""

    

class AdminActionArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class AdminActionArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class AdminActionArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class AdminActionArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class AdminActionArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    
    

class FindManyAdminActionArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive1'


class FindManyAdminActionArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive2'


class FindManyAdminActionArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive3'


class FindManyAdminActionArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    include: 'AdminActionIncludeFromAdminActionRecursive4'


class FindManyAdminActionArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['AdminActionOrderByInput', List['AdminActionOrderByInput']]
    where: 'AdminActionWhereInput'
    cursor: 'AdminActionWhereUniqueInput'
    distinct: List['AdminActionScalarFieldKeys']
    
    

class ChannelIncludeFromMessageReaction(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageReactionRecursive1']
    members: Union[bool, 'FindManyChannelMemberArgsFromMessageReactionRecursive1']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageReactionRecursive1']


class ChannelIncludeFromMessageReactionRecursive1(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageReactionRecursive2']
    members: Union[bool, 'FindManyChannelMemberArgsFromMessageReactionRecursive2']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageReactionRecursive2']


class ChannelIncludeFromMessageReactionRecursive2(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageReactionRecursive3']
    members: Union[bool, 'FindManyChannelMemberArgsFromMessageReactionRecursive3']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageReactionRecursive3']


class ChannelIncludeFromMessageReactionRecursive3(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    messages: Union[bool, 'FindManyMessageArgsFromMessageReactionRecursive4']
    members: Union[bool, 'FindManyChannelMemberArgsFromMessageReactionRecursive4']
    roles: Union[bool, 'FindManyUserRoleArgsFromMessageReactionRecursive4']


class ChannelIncludeFromMessageReactionRecursive4(TypedDict, total=False):
    """Relational arguments for MessageReaction"""

    

class ChannelArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'ChannelIncludeFromChannelRecursive1'


class ChannelArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'ChannelIncludeFromChannelRecursive2'


class ChannelArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'ChannelIncludeFromChannelRecursive3'


class ChannelArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'ChannelIncludeFromChannelRecursive4'


class ChannelArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    
    

class FindManyChannelArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive1'


class FindManyChannelArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive2'


class FindManyChannelArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive3'


class FindManyChannelArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    include: 'ChannelIncludeFromChannelRecursive4'


class FindManyChannelArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['ChannelOrderByInput', List['ChannelOrderByInput']]
    where: 'ChannelWhereInput'
    cursor: 'ChannelWhereUniqueInput'
    distinct: List['ChannelScalarFieldKeys']
    
    

class MessageIncludeFromMessageReaction(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive1']
    channel: Union[bool, 'ChannelArgsFromMessageReactionRecursive1']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageReactionRecursive1']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageReactionRecursive1']


class MessageIncludeFromMessageReactionRecursive1(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive2']
    channel: Union[bool, 'ChannelArgsFromMessageReactionRecursive2']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageReactionRecursive2']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageReactionRecursive2']


class MessageIncludeFromMessageReactionRecursive2(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive3']
    channel: Union[bool, 'ChannelArgsFromMessageReactionRecursive3']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageReactionRecursive3']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageReactionRecursive3']


class MessageIncludeFromMessageReactionRecursive3(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive4']
    channel: Union[bool, 'ChannelArgsFromMessageReactionRecursive4']
    mentions: Union[bool, 'FindManyMentionArgsFromMessageReactionRecursive4']
    reactions: Union[bool, 'FindManyMessageReactionArgsFromMessageReactionRecursive4']


class MessageIncludeFromMessageReactionRecursive4(TypedDict, total=False):
    """Relational arguments for MessageReaction"""

    

class MessageArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    
    

class FindManyMessageArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class ChannelMemberIncludeFromMessageReaction(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive1']
    channel: Union[bool, 'ChannelArgsFromMessageReactionRecursive1']


class ChannelMemberIncludeFromMessageReactionRecursive1(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive2']
    channel: Union[bool, 'ChannelArgsFromMessageReactionRecursive2']


class ChannelMemberIncludeFromMessageReactionRecursive2(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive3']
    channel: Union[bool, 'ChannelArgsFromMessageReactionRecursive3']


class ChannelMemberIncludeFromMessageReactionRecursive3(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive4']
    channel: Union[bool, 'ChannelArgsFromMessageReactionRecursive4']


class ChannelMemberIncludeFromMessageReactionRecursive4(TypedDict, total=False):
    """Relational arguments for MessageReaction"""

    

class ChannelMemberArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class ChannelMemberArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class ChannelMemberArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class ChannelMemberArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class ChannelMemberArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    
    

class FindManyChannelMemberArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive1'


class FindManyChannelMemberArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive2'


class FindManyChannelMemberArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive3'


class FindManyChannelMemberArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    include: 'ChannelMemberIncludeFromChannelMemberRecursive4'


class FindManyChannelMemberArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['ChannelMemberOrderByInput', List['ChannelMemberOrderByInput']]
    where: 'ChannelMemberWhereInput'
    cursor: 'ChannelMemberWhereUniqueInput'
    distinct: List['ChannelMemberScalarFieldKeys']
    
    

class MentionIncludeFromMessageReaction(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive1']
    message: Union[bool, 'MessageArgsFromMessageReactionRecursive1']


class MentionIncludeFromMessageReactionRecursive1(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive2']
    message: Union[bool, 'MessageArgsFromMessageReactionRecursive2']


class MentionIncludeFromMessageReactionRecursive2(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive3']
    message: Union[bool, 'MessageArgsFromMessageReactionRecursive3']


class MentionIncludeFromMessageReactionRecursive3(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive4']
    message: Union[bool, 'MessageArgsFromMessageReactionRecursive4']


class MentionIncludeFromMessageReactionRecursive4(TypedDict, total=False):
    """Relational arguments for MessageReaction"""

    

class MentionArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'MentionIncludeFromMentionRecursive1'


class MentionArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'MentionIncludeFromMentionRecursive2'


class MentionArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'MentionIncludeFromMentionRecursive3'


class MentionArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'MentionIncludeFromMentionRecursive4'


class MentionArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    
    

class FindManyMentionArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive1'


class FindManyMentionArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive2'


class FindManyMentionArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive3'


class FindManyMentionArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    include: 'MentionIncludeFromMentionRecursive4'


class FindManyMentionArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MentionOrderByInput', List['MentionOrderByInput']]
    where: 'MentionWhereInput'
    cursor: 'MentionWhereUniqueInput'
    distinct: List['MentionScalarFieldKeys']
    
    

class MessageReactionIncludeFromMessageReaction(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive1']
    message: Union[bool, 'MessageArgsFromMessageReactionRecursive1']


class MessageReactionIncludeFromMessageReactionRecursive1(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive2']
    message: Union[bool, 'MessageArgsFromMessageReactionRecursive2']


class MessageReactionIncludeFromMessageReactionRecursive2(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive3']
    message: Union[bool, 'MessageArgsFromMessageReactionRecursive3']


class MessageReactionIncludeFromMessageReactionRecursive3(TypedDict, total=False):
    """Relational arguments for MessageReaction"""
    user: Union[bool, 'UserArgsFromMessageReactionRecursive4']
    message: Union[bool, 'MessageArgsFromMessageReactionRecursive4']


class MessageReactionIncludeFromMessageReactionRecursive4(TypedDict, total=False):
    """Relational arguments for MessageReaction"""

    

class MessageReactionArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class MessageReactionArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class MessageReactionArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class MessageReactionArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class MessageReactionArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    
    

class FindManyMessageReactionArgsFromMessageReaction(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive1'


class FindManyMessageReactionArgsFromMessageReactionRecursive1(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive2'


class FindManyMessageReactionArgsFromMessageReactionRecursive2(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive3'


class FindManyMessageReactionArgsFromMessageReactionRecursive3(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    include: 'MessageReactionIncludeFromMessageReactionRecursive4'


class FindManyMessageReactionArgsFromMessageReactionRecursive4(TypedDict, total=False):
    """Arguments for MessageReaction"""
    take: int
    skip: int
    order_by: Union['MessageReactionOrderByInput', List['MessageReactionOrderByInput']]
    where: 'MessageReactionWhereInput'
    cursor: 'MessageReactionWhereUniqueInput'
    distinct: List['MessageReactionScalarFieldKeys']
    


FindManyMessageReactionArgs = FindManyMessageReactionArgsFromMessageReaction
FindFirstMessageReactionArgs = FindManyMessageReactionArgsFromMessageReaction


    

class MessageReactionWhereInput(TypedDict, total=False):
    """MessageReaction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    emoji: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    messageId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    message: 'MessageRelationFilter'

    # should be noted that AND and NOT should be Union['MessageReactionWhereInputRecursive1', List['MessageReactionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MessageReactionWhereInputRecursive1']
    OR: List['MessageReactionWhereInputRecursive1']
    NOT: List['MessageReactionWhereInputRecursive1']


class MessageReactionWhereInputRecursive1(TypedDict, total=False):
    """MessageReaction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    emoji: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    messageId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    message: 'MessageRelationFilter'

    # should be noted that AND and NOT should be Union['MessageReactionWhereInputRecursive2', List['MessageReactionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MessageReactionWhereInputRecursive2']
    OR: List['MessageReactionWhereInputRecursive2']
    NOT: List['MessageReactionWhereInputRecursive2']


class MessageReactionWhereInputRecursive2(TypedDict, total=False):
    """MessageReaction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    emoji: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    messageId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    message: 'MessageRelationFilter'

    # should be noted that AND and NOT should be Union['MessageReactionWhereInputRecursive3', List['MessageReactionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MessageReactionWhereInputRecursive3']
    OR: List['MessageReactionWhereInputRecursive3']
    NOT: List['MessageReactionWhereInputRecursive3']


class MessageReactionWhereInputRecursive3(TypedDict, total=False):
    """MessageReaction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    emoji: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    messageId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    message: 'MessageRelationFilter'

    # should be noted that AND and NOT should be Union['MessageReactionWhereInputRecursive4', List['MessageReactionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MessageReactionWhereInputRecursive4']
    OR: List['MessageReactionWhereInputRecursive4']
    NOT: List['MessageReactionWhereInputRecursive4']


class MessageReactionWhereInputRecursive4(TypedDict, total=False):
    """MessageReaction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    emoji: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    messageId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    message: 'MessageRelationFilter'



# aggregate MessageReaction types


    

class MessageReactionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """MessageReaction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    emoji: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageReactionScalarWhereWithAggregatesInputRecursive1']
    OR: List['MessageReactionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MessageReactionScalarWhereWithAggregatesInputRecursive1']


class MessageReactionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """MessageReaction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    emoji: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageReactionScalarWhereWithAggregatesInputRecursive2']
    OR: List['MessageReactionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MessageReactionScalarWhereWithAggregatesInputRecursive2']


class MessageReactionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """MessageReaction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    emoji: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageReactionScalarWhereWithAggregatesInputRecursive3']
    OR: List['MessageReactionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MessageReactionScalarWhereWithAggregatesInputRecursive3']


class MessageReactionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """MessageReaction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    emoji: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageReactionScalarWhereWithAggregatesInputRecursive4']
    OR: List['MessageReactionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MessageReactionScalarWhereWithAggregatesInputRecursive4']


class MessageReactionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """MessageReaction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    emoji: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']



class MessageReactionGroupByOutput(TypedDict, total=False):
    id: _str
    emoji: _str
    createdAt: datetime.datetime
    userId: _str
    messageId: _str
    _sum: 'MessageReactionSumAggregateOutput'
    _avg: 'MessageReactionAvgAggregateOutput'
    _min: 'MessageReactionMinAggregateOutput'
    _max: 'MessageReactionMaxAggregateOutput'
    _count: 'MessageReactionCountAggregateOutput'


class MessageReactionAvgAggregateOutput(TypedDict, total=False):
    """MessageReaction output for aggregating averages"""


class MessageReactionSumAggregateOutput(TypedDict, total=False):
    """MessageReaction output for aggregating sums"""


class MessageReactionScalarAggregateOutput(TypedDict, total=False):
    """MessageReaction output including scalar fields"""
    id: _str
    emoji: _str
    createdAt: datetime.datetime
    userId: _str
    messageId: _str


MessageReactionMinAggregateOutput = MessageReactionScalarAggregateOutput
MessageReactionMaxAggregateOutput = MessageReactionScalarAggregateOutput


class MessageReactionMaxAggregateInput(TypedDict, total=False):
    """MessageReaction input for aggregating by max"""
    id: bool
    emoji: bool
    createdAt: bool
    userId: bool
    messageId: bool


class MessageReactionMinAggregateInput(TypedDict, total=False):
    """MessageReaction input for aggregating by min"""
    id: bool
    emoji: bool
    createdAt: bool
    userId: bool
    messageId: bool


class MessageReactionNumberAggregateInput(TypedDict, total=False):
    """MessageReaction input for aggregating numbers"""


MessageReactionAvgAggregateInput = MessageReactionNumberAggregateInput
MessageReactionSumAggregateInput = MessageReactionNumberAggregateInput


MessageReactionCountAggregateInput = TypedDict(
    'MessageReactionCountAggregateInput',
    {
        'id': bool,
        'emoji': bool,
        'createdAt': bool,
        'userId': bool,
        'messageId': bool,
        '_all': bool,
    },
    total=False,
)

MessageReactionCountAggregateOutput = TypedDict(
    'MessageReactionCountAggregateOutput',
    {
        'id': int,
        'emoji': int,
        'createdAt': int,
        'userId': int,
        'messageId': int,
        '_all': int,
    },
    total=False,
)


MessageReactionKeys = Literal[
    'id',
    'emoji',
    'createdAt',
    'userId',
    'messageId',
    'user',
    'message',
]
MessageReactionScalarFieldKeys = Literal[
    'id',
    'emoji',
    'createdAt',
    'userId',
    'messageId',
]
MessageReactionScalarFieldKeysT = TypeVar('MessageReactionScalarFieldKeysT', bound=MessageReactionScalarFieldKeys)

MessageReactionRelationalFieldKeys = Literal[
        'user',
        'message',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields